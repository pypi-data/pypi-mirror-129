"""
MIT License

Copyright (c) 2021 RPS
Copyright (c) 2020-2021 Tag-Epic

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
from fanta.http import Route


class BaseContext:
    def __init__(self, client, data):
        """
        Basic context, use one of the subclasses for typing.

        Parameters
        ----------
        client: Client
            :class:`Client` to use.
        data: Dict[str, Any]
            Data sent by Discord gateway.
        """
        self.client = client
        self._data = data

        # This possibly sucks performance wise? Please make a pr if there is a better way to do this.
        for field, field_data in self._data.items():
            setattr(self, field, field_data)


class MessageContext(BaseContext):
    """
    Message context

    Autogenerated by BaseContext.
    """

    id = None
    channel_id = None
    guild_id = None
    author = None
    member = None
    content = None
    timestamp = None
    edited_timestamp = None
    tts = None
    mention_everyone = None
    mentions = None
    mention_roles = None
    mention_channels = None
    attachments = None
    embeds = None
    reactions = None
    nonce = None
    pinned = None
    webhook_id = None
    type = None
    activity = None
    application = None
    message_reference = None
    flags = None

    async def send(self, **kwargs):
        """
        Sends a message in the channel of the message.
        """
        route = Route(
            "POST", "/channels/{channel_id}/messages", channel_id=self.channel_id
        )
        return await self.client.http.request(route, json=kwargs)
