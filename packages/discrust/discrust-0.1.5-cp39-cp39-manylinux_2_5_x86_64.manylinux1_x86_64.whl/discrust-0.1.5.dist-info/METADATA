Metadata-Version: 2.1
Name: discrust
Version: 0.1.5
Requires-Dist: numpy>=1.21
Requires-Dist: pandas>=1.3
Summary: Supervised discretization with Rust
Keywords: rust,discretize,scorecard,numpy,machine learning
Author: James Inlow
Maintainer: James Inlow
License:                                  Apache License
	                           Version 2.0, January 2004
	                        http://www.apache.org/licenses/
	
	   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
	
	   1. Definitions.
	
	      "License" shall mean the terms and conditions for use, reproduction,
	      and distribution as defined by Sections 1 through 9 of this document.
	
	      "Licensor" shall mean the copyright owner or entity authorized by
	      the copyright owner that is granting the License.
	
	      "Legal Entity" shall mean the union of the acting entity and all
	      other entities that control, are controlled by, or are under common
	      control with that entity. For the purposes of this definition,
	      "control" means (i) the power, direct or indirect, to cause the
	      direction or management of such entity, whether by contract or
	      otherwise, or (ii) ownership of fifty percent (50%) or more of the
	      outstanding shares, or (iii) beneficial ownership of such entity.
	
	      "You" (or "Your") shall mean an individual or Legal Entity
	      exercising permissions granted by this License.
	
	      "Source" form shall mean the preferred form for making modifications,
	      including but not limited to software source code, documentation
	      source, and configuration files.
	
	      "Object" form shall mean any form resulting from mechanical
	      transformation or translation of a Source form, including but
	      not limited to compiled object code, generated documentation,
	      and conversions to other media types.
	
	      "Work" shall mean the work of authorship, whether in Source or
	      Object form, made available under the License, as indicated by a
	      copyright notice that is included in or attached to the work
	      (an example is provided in the Appendix below).
	
	      "Derivative Works" shall mean any work, whether in Source or Object
	      form, that is based on (or derived from) the Work and for which the
	      editorial revisions, annotations, elaborations, or other modifications
	      represent, as a whole, an original work of authorship. For the purposes
	      of this License, Derivative Works shall not include works that remain
	      separable from, or merely link (or bind by name) to the interfaces of,
	      the Work and Derivative Works thereof.
	
	      "Contribution" shall mean any work of authorship, including
	      the original version of the Work and any modifications or additions
	      to that Work or Derivative Works thereof, that is intentionally
	      submitted to Licensor for inclusion in the Work by the copyright owner
	      or by an individual or Legal Entity authorized to submit on behalf of
	      the copyright owner. For the purposes of this definition, "submitted"
	      means any form of electronic, verbal, or written communication sent
	      to the Licensor or its representatives, including but not limited to
	      communication on electronic mailing lists, source code control systems,
	      and issue tracking systems that are managed by, or on behalf of, the
	      Licensor for the purpose of discussing and improving the Work, but
	      excluding communication that is conspicuously marked or otherwise
	      designated in writing by the copyright owner as "Not a Contribution."
	
	      "Contributor" shall mean Licensor and any individual or Legal Entity
	      on behalf of whom a Contribution has been received by Licensor and
	      subsequently incorporated within the Work.
	
	   2. Grant of Copyright License. Subject to the terms and conditions of
	      this License, each Contributor hereby grants to You a perpetual,
	      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
	      copyright license to reproduce, prepare Derivative Works of,
	      publicly display, publicly perform, sublicense, and distribute the
	      Work and such Derivative Works in Source or Object form.
	
	   3. Grant of Patent License. Subject to the terms and conditions of
	      this License, each Contributor hereby grants to You a perpetual,
	      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
	      (except as stated in this section) patent license to make, have made,
	      use, offer to sell, sell, import, and otherwise transfer the Work,
	      where such license applies only to those patent claims licensable
	      by such Contributor that are necessarily infringed by their
	      Contribution(s) alone or by combination of their Contribution(s)
	      with the Work to which such Contribution(s) was submitted. If You
	      institute patent litigation against any entity (including a
	      cross-claim or counterclaim in a lawsuit) alleging that the Work
	      or a Contribution incorporated within the Work constitutes direct
	      or contributory patent infringement, then any patent licenses
	      granted to You under this License for that Work shall terminate
	      as of the date such litigation is filed.
	
	   4. Redistribution. You may reproduce and distribute copies of the
	      Work or Derivative Works thereof in any medium, with or without
	      modifications, and in Source or Object form, provided that You
	      meet the following conditions:
	
	      (a) You must give any other recipients of the Work or
	          Derivative Works a copy of this License; and
	
	      (b) You must cause any modified files to carry prominent notices
	          stating that You changed the files; and
	
	      (c) You must retain, in the Source form of any Derivative Works
	          that You distribute, all copyright, patent, trademark, and
	          attribution notices from the Source form of the Work,
	          excluding those notices that do not pertain to any part of
	          the Derivative Works; and
	
	      (d) If the Work includes a "NOTICE" text file as part of its
	          distribution, then any Derivative Works that You distribute must
	          include a readable copy of the attribution notices contained
	          within such NOTICE file, excluding those notices that do not
	          pertain to any part of the Derivative Works, in at least one
	          of the following places: within a NOTICE text file distributed
	          as part of the Derivative Works; within the Source form or
	          documentation, if provided along with the Derivative Works; or,
	          within a display generated by the Derivative Works, if and
	          wherever such third-party notices normally appear. The contents
	          of the NOTICE file are for informational purposes only and
	          do not modify the License. You may add Your own attribution
	          notices within Derivative Works that You distribute, alongside
	          or as an addendum to the NOTICE text from the Work, provided
	          that such additional attribution notices cannot be construed
	          as modifying the License.
	
	      You may add Your own copyright statement to Your modifications and
	      may provide additional or different license terms and conditions
	      for use, reproduction, or distribution of Your modifications, or
	      for any such Derivative Works as a whole, provided Your use,
	      reproduction, and distribution of the Work otherwise complies with
	      the conditions stated in this License.
	
	   5. Submission of Contributions. Unless You explicitly state otherwise,
	      any Contribution intentionally submitted for inclusion in the Work
	      by You to the Licensor shall be under the terms and conditions of
	      this License, without any additional terms or conditions.
	      Notwithstanding the above, nothing herein shall supersede or modify
	      the terms of any separate license agreement you may have executed
	      with Licensor regarding such Contributions.
	
	   6. Trademarks. This License does not grant permission to use the trade
	      names, trademarks, service marks, or product names of the Licensor,
	      except as required for reasonable and customary use in describing the
	      origin of the Work and reproducing the content of the NOTICE file.
	
	   7. Disclaimer of Warranty. Unless required by applicable law or
	      agreed to in writing, Licensor provides the Work (and each
	      Contributor provides its Contributions) on an "AS IS" BASIS,
	      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
	      implied, including, without limitation, any warranties or conditions
	      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
	      PARTICULAR PURPOSE. You are solely responsible for determining the
	      appropriateness of using or redistributing the Work and assume any
	      risks associated with Your exercise of permissions under this License.
	
	   8. Limitation of Liability. In no event and under no legal theory,
	      whether in tort (including negligence), contract, or otherwise,
	      unless required by applicable law (such as deliberate and grossly
	      negligent acts) or agreed to in writing, shall any Contributor be
	      liable to You for damages, including any direct, indirect, special,
	      incidental, or consequential damages of any character arising as a
	      result of this License or out of the use or inability to use the
	      Work (including but not limited to damages for loss of goodwill,
	      work stoppage, computer failure or malfunction, or any and all
	      other commercial damages or losses), even if such Contributor
	      has been advised of the possibility of such damages.
	
	   9. Accepting Warranty or Additional Liability. While redistributing
	      the Work or Derivative Works thereof, You may choose to offer,
	      and charge a fee for, acceptance of support, warranty, indemnity,
	      or other liability obligations and/or rights consistent with this
	      License. However, in accepting such obligations, You may act only
	      on Your own behalf and on Your sole responsibility, not on behalf
	      of any other Contributor, and only if You agree to indemnify,
	      defend, and hold each Contributor harmless for any liability
	      incurred by, or claims asserted against, such Contributor by reason
	      of your accepting any such warranty or additional liability.
	
	   END OF TERMS AND CONDITIONS
	
	   APPENDIX: How to apply the Apache License to your work.
	
	      To apply the Apache License to your work, attach the following
	      boilerplate notice, with the fields enclosed by brackets "[]"
	      replaced with your own identifying information. (Don't include
	      the brackets!)  The text should be enclosed in the appropriate
	      comment syntax for the file format. We also recommend that a
	      file or class name and description of purpose be included on the
	      same "printed page" as the copyright notice for easier
	      identification within third-party archives.
	
	   Copyright 2021 James Inlow
	
	   Licensed under the Apache License, Version 2.0 (the "License");
	   you may not use this file except in compliance with the License.
	   You may obtain a copy of the License at
	
	       http://www.apache.org/licenses/LICENSE-2.0
	
	   Unless required by applicable law or agreed to in writing, software
	   distributed under the License is distributed on an "AS IS" BASIS,
	   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	   See the License for the specific language governing permissions and
	   limitations under the License.
	
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM

# Discrust

## _Supervised discretization with Rust_

[![PyPI version shields.io](https://img.shields.io/pypi/v/discrust.svg)](https://pypi.python.org/pypi/discrust/)

The `discrust` package provides a supervised discretization algorithm. Under the hood it implements a decision tree, using information value to find the optimal splits, and provides several different methods to constrain the final discretization scheme.

_The package draws heavily from the [ivpy](https://github.com/gravesee/ivpy) package, both in the algorithm and the parameter controls. Why make another package? This package serves as a proof of
concept of building a python package using Rust and pyo3. Additionally the goal is for this
package to better align with the scikit-learn API, and possibly be used in other Rust based
credit score building tools._

## Usage

The package has a single user facing class, `Discretizer` that can be instantiated with the following arguments.

- `min_obs` **_(Optional[float], optional)_**: Minimum number of observations required
  in a bin. Defaults to 5.
- `max_bins` **_(Optional[int], optional)_**: Maximum number of bins to split the variable
  into. Defaults to 10.
- `min_iv` **_(Optional[float], optional)_**: Minimum information value required to make a split.
  Defaults to 0.001.
- `min_pos` **_(Optional[float], optional)_**: Minimum number of records with a value of one
  that should be present in a split. Defaults to 5.
- `mono` **_(Optional[int], optional)_**: The monotonicity required between the binned variable and
  the binary performance outcome. A value of -1 will result in negative correlation between
  the binned x and y variables, while a value of 1 will result in a positive correlation between the
  binned x variable and the y variable. Specifying a value of 0 will result in binning
  x, with no monotonicity constraint. If a value of None is specified the monotonicity
  will be determined the monotonicity of the first split. Defaults to None.

The `fit` method can be called on data and accepts the following parameters.

- `x` **_(ArrayLike)_**: An arraylike numeric field that will be discretized based on
  the values of `y`, and the constraints the `Discretizer` was initialized with.
- `y` **_(ArrayLike)_**: An arraylike binary field.
- `sample_weight` **_(Optional[ArrayLike], optional)_**: Optional sample weight array
  to be used when calculating the optimal breaks. Defaults to None.
- `exception_values` **_(Optional[List[float]], optional)_**: Optional list specifying exception
  values. These values are held out of the binning process, additionally, their
  respective weight of evidence, and summary information can be found in the
  `exception_values_` attribute once the discretizer has been fit.

A `np.nan` value may be present in the list of possible exception values. If there are `np.nan` values present in the `x` variable, and `np.nan` is not listed as a possible exception value, an error will be raised. Additionally, an error will be raised if `np.nan` is found to be in `y` or the `sample_weight` arrays.

This method will fit the decision tree and find the optimal split values for the feature given the constraints. After being fit the discretizer will have a `splits_` attribute with the optimal
split values.

```python
import seaborn as sns

df = sns.load_dataset("titanic")

from discrust import Discretizer

ds = Discretizer(min_obs=5, max_bins=10, min_iv=0.001, min_pos=1.0, mono=None)
ds.fit(df["fare"], df["survived"])
ds.splits_
# [-inf, 6.95, 7.125, 7.7292, 10.4625, 15.1, 50.4958, 52.0, 73.5, 79.65, inf]
```

Here we show what the results are if exception values are also specified. These exception values will be held out when calculating the bins.

```python
ds = Discretizer(min_obs=5, max_bins=10, min_iv=0.001, min_pos=1.0, mono=None)
ds.fit(df["age"], df["survived"], exception_values=[np.nan, 1.0])
ds.exception_values_
# {'vals_': [nan, 1.0],
#  'totals_ct_': [177.0, 7.0],
#  'iv_': [0.03054206173541801, 0.015253257689460616],
#  'ones_ct_': [52.0, 5.0],
#  'woe_': [-0.40378231427394834, 1.3895784363210804],
#  'zero_ct_': [125.0, 2.0]}
```

The `exception_values_` dictionary has the following keys.

- `vals_`: The exception values passed to the `Discretizer`.
- `totals_ct_`: The total number of each respective exception value present in the `x` variable used for fitting.
- `ones_ct_`: Total count of the positive class for each exception value.
- `zero_ct_`: Total count of zeros for each respective value.
- `woe_`: The weight of evidence for each respective exception value.
- `iv_`: The information value for each respective exception value.

The `predict` method can be called and will discretize the feature, and then perform either weight of evidence substitution on each binned level, or return the bin index. This method takes the following arguments.

- `x` **_(ArrayLike)_**: An arraylike numeric field.
- `prediction_type` **_(str, optional)_**: A string specifying which prediction
  type should be returned. The string specified must be one of
  "woe" or "index". Defaults to "woe".

  - If "woe" is supplied, weight evidence subtitution will be performed for each value, and the
    weight of evidence of the bin the value should fall in will be returned. For exception values found in `x`, the calculated weight of evidence for that exception value will be returned. If the exception value was never present in the `x` variable when the `Discretizer` was fit, then the returned weight of evidence will be zero for the exception value.
  - If "index" is specified, each value will be converted to the
    relevant bin index. These bins will be created from the `splits_`
    attribute and will be zero indexed. Any exception values will be encoded
    starting with -1 to -N, where N is the number of exception values present
    in the `exception_values_` attribute. The order of the exception values
    will be equivalent to the `vals_` key in this attribute.

```python
ds.predict(df["fare"])[0:5]
array([-0.84846814, 0.78344263, -0.787529, 0.78344263, -0.787529])
```

Specifying `prediction_type` to "index" will be equivalent to use the pandas `cut` method with the `splits_` on the `Discretizer` object used as the bins.

```python
import pandas as pd

ds = Discretizer(min_obs=5, max_bins=5, min_iv=0.001, min_pos=1.0, mono=None)
ds.fit(df["fare"], df["survived"])
pd.cut(df["fare"], bins=ds.splits_).value_counts().sort_index()
# (-inf, 6.95]        26
# (6.95, 7.125]       16
# (7.125, 10.462]    297
# (10.462, 73.5]     455
# (73.5, inf]         97
# Name: fare, dtype: int64

pd.value_counts(ds.predict(df["fare"], prediction_type="index")).sort_index()
# 0     26
# 1     16
# 2    297
# 3    455
# 4     97
# dtype: int64
```

One of the main benefits of using the `predict` method over the pandas cut function directly, is the built in support for exception values.

```python
ds = Discretizer(min_obs=5, max_bins=4, min_iv=0.001, min_pos=1.0, mono=None)
ds.fit(df["age"], df["survived"], exception_values=[np.nan, 1.0])

pd.value_counts(ds.predict(df["age"], prediction_type="index")).sort_index()
# -2      7
# -1    177
#  0      6
#  1     34
#  2    654
#  3     13
# dtype: int64

ds.exception_values_["vals_"]
# [nan, 1.0]
ds.exception_values_["totals_ct_"]
# [177.0, 7.0]
```

## Installation

### From PyPi

For Windows users, the package can be installed directly from pypi with the following command.

```shell
python -m pip install discrust
```

### Building from Source

The package can be built from source, it utalizes the [maturin](https://github.com/PyO3/maturin) tool as a build backend. This tool requires you have python, and a working Rust compiler installed, [see here for details](https://www.rust-lang.org/tools/install). If these two requirements are met, you can clone this repository, and run the following command in the repositories root directory.

```shell
python -m pip install . -v
```

This should invoke the `maturin` tool, which will handle the building of the Rust code and installation of the package. Alternativly, if you simply want to build a wheel, you can run the following command after installing `maturin`.

```shell
maturin build --release
```

_I have had some problems building packages with maturin directly in a conda environment, this is actually a bug on anaconda's side that will hopefully be resolved. If this does give you any problems, it's usually easiest to build a wheel inside of a `venv` and then install the wheel._

