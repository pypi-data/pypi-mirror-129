{"version":3,"file":"34fe0634.js","mappings":";AA4CA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;AACA;;;;;;;AAqOA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;AAUA;;AAGA;;AAIA;;AAEA;AAEA;;AAGA;AAGA;;;AAGA;;;;AAKA;;;AAlEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;;AAGA;AAvNA;;;;;;;;;;;;AAAA;;;;AC4CA;;;AAKA;AACA;;AAIA;;AAIA;;AAQA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;AAKA;;AAGA;;AAIA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;;;AAYA;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;;AAEA;AAGA;AACA;;;;;AASA;AACA;;;AAGA;AACA;;;AAGA;;;AA1LA;;;;;;;;;;;;;;AAAA;;ACgBA;AACA;AACA;AACA;AACA;;;AAKA;;;AAGA;AACA;;;AAKA;AACA;AAGA;AAGA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;;;AAGA;;;;AAKA;AAEA;;;AArFA;;;;;;;;;;;;;AA7CA","sources":["webpack://home-assistant-frontend/./src/components/device/ha-devices-picker.ts","webpack://home-assistant-frontend/./src/components/device/ha-area-devices-picker.ts","webpack://home-assistant-frontend/./src/panels/config/automation/thingtalk/ha-thingtalk-placeholders.ts","webpack://home-assistant-frontend/./src/panels/config/automation/thingtalk/dialog-thingtalk.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-device-picker\";\n\n@customElement(\"ha-devices-picker\")\nclass HaDevicesPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string[];\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  @property({ attribute: \"picked-device-label\" })\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  public pickedDeviceLabel?: string;\n\n  @property({ attribute: \"pick-device-label\" }) public pickDeviceLabel?: string;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const currentDevices = this._currentDevices;\n    return html`\n      ${currentDevices.map(\n        (entityId) => html`\n          <div>\n            <ha-device-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .value=${entityId}\n              .label=${this.pickedDeviceLabel}\n              @value-changed=${this._deviceChanged}\n            ></ha-device-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-device-picker\n          .hass=${this.hass}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .label=${this.pickDeviceLabel}\n          @value-changed=${this._addDevice}\n        ></ha-device-picker>\n      </div>\n    `;\n  }\n\n  private get _currentDevices() {\n    return this.value || [];\n  }\n\n  private async _updateDevices(devices) {\n    fireEvent(this, \"value-changed\", {\n      value: devices,\n    });\n\n    this.value = devices;\n  }\n\n  private _deviceChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === curValue || newValue !== \"\") {\n      return;\n    }\n    if (newValue === \"\") {\n      this._updateDevices(\n        this._currentDevices.filter((dev) => dev !== curValue)\n      );\n    } else {\n      this._updateDevices(\n        this._currentDevices.map((dev) => (dev === curValue ? newValue : dev))\n      );\n    }\n  }\n\n  private async _addDevice(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentDevices = this._currentDevices;\n    if (currentDevices.includes(toAdd)) {\n      return;\n    }\n\n    this._updateDevices([...currentDevices, toAdd]);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-devices-picker\": HaDevicesPicker;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiCheck, mdiClose, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../data/area_registry\";\nimport {\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./ha-devices-picker\";\n\ninterface DevicesByArea {\n  [areaId: string]: AreaDevices;\n}\n\ninterface AreaDevices {\n  id?: string;\n  name: string;\n  devices: string[];\n}\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<AreaDevices> = (item) => html`<style>\n    paper-item {\n      padding: 0;\n      margin: -10px;\n      margin-left: 0;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      margin-right: -2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-item {\n      margin-left: 10px;\n    }\n  </style>\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-item>\n    <paper-item-body two-line=\"\">\n      <div class=\"name\">${item.name}</div>\n      <div secondary>${item.devices.length} devices</div>\n    </paper-item-body>\n  </paper-item>`;\n\n@customElement(\"ha-area-devices-picker\")\nexport class HaAreaDevicesPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public area?: string;\n\n  @property() public devices?: string[];\n\n  /**\n   * Show only devices with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no devices with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only deviced with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property({ type: Boolean })\n  private _opened?: boolean;\n\n  @state() private _areaPicker = true;\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  private _selectedDevices: string[] = [];\n\n  private _filteredDevices: DeviceRegistryEntry[] = [];\n\n  private _getAreasWithDevices = memoizeOne(\n    (\n      devices: DeviceRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      entities: EntityRegistryEntry[],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"]\n    ): AreaDevices[] => {\n      if (!devices.length) {\n        return [];\n      }\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n      for (const entity of entities) {\n        if (!entity.device_id) {\n          continue;\n        }\n        if (!(entity.device_id in deviceEntityLookup)) {\n          deviceEntityLookup[entity.device_id] = [];\n        }\n        deviceEntityLookup[entity.device_id].push(entity);\n      }\n\n      let inputDevices = [...devices];\n\n      if (includeDomains) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n      }\n\n      if (excludeDomains) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return true;\n          }\n          return entities.every(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n      }\n\n      if (includeDeviceClasses) {\n        inputDevices = inputDevices.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        });\n      }\n\n      this._filteredDevices = inputDevices;\n\n      const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n      for (const area of areas) {\n        areaLookup[area.area_id] = area;\n      }\n\n      const devicesByArea: DevicesByArea = {};\n\n      for (const device of inputDevices) {\n        const areaId = device.area_id;\n        if (areaId) {\n          if (!(areaId in devicesByArea)) {\n            devicesByArea[areaId] = {\n              id: areaId,\n              name: areaLookup[areaId].name,\n              devices: [],\n            };\n          }\n          devicesByArea[areaId].devices.push(device.id);\n        }\n      }\n\n      const sorted = Object.keys(devicesByArea)\n        .sort((a, b) =>\n          stringCompare(\n            devicesByArea[a].name || \"\",\n            devicesByArea[b].name || \"\"\n          )\n        )\n        .map((key) => devicesByArea[key]);\n\n      return sorted;\n    }\n  );\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this._areas = areas;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"area\") && this.area) {\n      this._areaPicker = true;\n      this.value = this.area;\n    } else if (changedProps.has(\"devices\") && this.devices) {\n      this._areaPicker = false;\n      const filteredDeviceIds = this._filteredDevices.map(\n        (device) => device.id\n      );\n      const selectedDevices = this.devices.filter((device) =>\n        filteredDeviceIds.includes(device)\n      );\n      this._setValue(selectedDevices);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._devices || !this._areas || !this._entities) {\n      return html``;\n    }\n    const areas = this._getAreasWithDevices(\n      this._devices,\n      this._areas,\n      this._entities,\n      this.includeDomains,\n      this.excludeDomains,\n      this.includeDeviceClasses\n    );\n    if (!this._areaPicker || areas.length === 0) {\n      return html`\n        <ha-devices-picker\n          @value-changed=${this._devicesPicked}\n          .hass=${this.hass}\n          .includeDomains=${this.includeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .value=${this._selectedDevices}\n          .pickDeviceLabel=${`Add ${this.label} device`}\n          .pickedDeviceLabel=${`${this.label} device`}\n        ></ha-devices-picker>\n        ${areas.length > 0\n          ? html`\n              <mwc-button @click=${this._switchPicker}\n                >Choose an area</mwc-button\n              >\n            `\n          : \"\"}\n      `;\n    }\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"id\"\n        item-id-path=\"id\"\n        item-label-path=\"name\"\n        .items=${areas}\n        .value=${this._value}\n        ${comboBoxRenderer(rowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._areaPicked}\n      >\n        <paper-input\n          .label=${this.label === undefined && this.hass\n            ? this.hass.localize(\"ui.components.device-picker.device\")\n            : `${this.label} in area`}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          <div class=\"suffix\" slot=\"suffix\">\n            ${this.value\n              ? html`<ha-icon-button\n                  class=\"clear-button\"\n                  .label=${this.hass.localize(\n                    \"ui.components.device-picker.clear\"\n                  )}\n                  .path=${mdiClose}\n                  @click=${this._clearValue}\n                  no-ripple\n                ></ha-icon-button> `\n              : \"\"}\n            ${areas.length > 0\n              ? html`\n                  <ha-icon-button\n                    .label=${this.hass.localize(\n                      \"ui.components.device-picker.show_devices\"\n                    )}\n                    .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n                    class=\"toggle-button\"\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </div>\n        </paper-input>\n      </vaadin-combo-box-light>\n      <mwc-button @click=${this._switchPicker}\n        >Choose individual devices</mwc-button\n      >\n    `;\n  }\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    this._setValue([]);\n  }\n\n  private get _value() {\n    return this.value || [];\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private async _switchPicker() {\n    this._areaPicker = !this._areaPicker;\n  }\n\n  private async _areaPicked(ev: PolymerChangedEvent<string>) {\n    const value = ev.detail.value;\n    let selectedDevices = [];\n    const target = ev.target as any;\n    if (target.selectedItem) {\n      selectedDevices = target.selectedItem.devices;\n    }\n\n    if (value !== this._value || this._selectedDevices !== selectedDevices) {\n      this._setValue(selectedDevices, value);\n    }\n  }\n\n  private _devicesPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    const selectedDevices = ev.detail.value;\n    this._setValue(selectedDevices);\n  }\n\n  private _setValue(selectedDevices: string[], value = \"\") {\n    this.value = value;\n    this._selectedDevices = selectedDevices;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value: selectedDevices });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .suffix {\n        display: flex;\n      }\n      ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 0px 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-area-devices-picker\": HaAreaDevicesPicker;\n  }\n}\n","/* eslint-disable lit/no-template-arrow */\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { applyPatch, getPath } from \"../../../../common/util/patch\";\nimport \"../../../../components/device/ha-area-devices-picker\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../../../data/area_registry\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../../data/device_registry\";\nimport { subscribeEntityRegistry } from \"../../../../data/entity_registry\";\nimport { domainToName } from \"../../../../data/integration\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { Placeholder, PlaceholderContainer } from \"./dialog-thingtalk\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"placeholders-filled\": { value: PlaceholderValues };\n  }\n}\n\nexport interface PlaceholderValues {\n  [key: string]: {\n    [index: number]: {\n      [index: number]: { device_id?: string; entity_id?: string };\n    };\n  };\n}\n\nexport interface ExtraInfo {\n  [key: string]: {\n    [index: number]: {\n      [index: number]: {\n        area_id?: string;\n        device_ids?: string[];\n        manualEntity: boolean;\n      };\n    };\n  };\n}\n\ninterface DeviceEntitiesLookup {\n  [deviceId: string]: string[];\n}\n\n@customElement(\"ha-thingtalk-placeholders\")\nexport class ThingTalkPlaceholders extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public opened!: boolean;\n\n  public skip!: () => void;\n\n  @property() public placeholders!: PlaceholderContainer;\n\n  @state() private _error?: string;\n\n  private _deviceEntityLookup: DeviceEntitiesLookup = {};\n\n  @state() private _extraInfo: ExtraInfo = {};\n\n  @state() private _placeholderValues: PlaceholderValues = {};\n\n  private _devices?: DeviceRegistryEntry[];\n\n  private _areas?: AreaRegistryEntry[];\n\n  private _search = false;\n\n  public hassSubscribe() {\n    return [\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        for (const entity of entries) {\n          if (!entity.device_id) {\n            continue;\n          }\n          if (!(entity.device_id in this._deviceEntityLookup)) {\n            this._deviceEntityLookup[entity.device_id] = [];\n          }\n          if (\n            !this._deviceEntityLookup[entity.device_id].includes(\n              entity.entity_id\n            )\n          ) {\n            this._deviceEntityLookup[entity.device_id].push(entity.entity_id);\n          }\n        }\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n        this._searchNames();\n      }),\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this._areas = areas;\n        this._searchNames();\n      }),\n    ];\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"placeholders\")) {\n      this._search = true;\n      this._searchNames();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        .heading=${this.hass.localize(\n          `ui.panel.config.automation.thingtalk.link_devices.header`\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          ${Object.entries(this.placeholders).map(\n            ([type, placeholders]) =>\n              html`\n                <h3>\n                  ${this.hass.localize(\n                    `ui.panel.config.automation.editor.${type}s.name`\n                  )}:\n                </h3>\n                ${placeholders.map((placeholder) => {\n                  if (placeholder.fields.includes(\"device_id\")) {\n                    const extraInfo = getPath(this._extraInfo, [\n                      type,\n                      placeholder.index,\n                    ]);\n                    return html`\n                      <ha-area-devices-picker\n                        .type=${type}\n                        .placeholder=${placeholder}\n                        @value-changed=${this._devicePicked}\n                        .hass=${this.hass}\n                        .area=${extraInfo ? extraInfo.area_id : undefined}\n                        .devices=${extraInfo && extraInfo.device_ids\n                          ? extraInfo.device_ids\n                          : undefined}\n                        .includeDomains=${placeholder.domains}\n                        .includeDeviceClasses=${placeholder.device_classes}\n                        .label=${this._getLabel(\n                          placeholder.domains,\n                          placeholder.device_classes\n                        )}\n                      ></ha-area-devices-picker>\n                      ${extraInfo && extraInfo.manualEntity\n                        ? html`\n                            <h3>\n                              ${this.hass.localize(\n                                `ui.panel.config.automation.thingtalk.link_devices.ambiguous_entities`\n                              )}\n                            </h3>\n                            ${Object.keys(extraInfo.manualEntity).map(\n                              (idx) => html`\n                                <ha-entity-picker\n                                  id=\"device-entity-picker\"\n                                  .type=${type}\n                                  .placeholder=${placeholder}\n                                  .index=${idx}\n                                  @change=${this._entityPicked}\n                                  .includeDomains=${placeholder.domains}\n                                  .includeDeviceClasses=${placeholder.device_classes}\n                                  .hass=${this.hass}\n                                  .label=${`${this._getLabel(\n                                    placeholder.domains,\n                                    placeholder.device_classes\n                                  )} of device ${this._getDeviceName(\n                                    getPath(this._placeholderValues, [\n                                      type,\n                                      placeholder.index,\n                                      idx,\n                                      \"device_id\",\n                                    ])\n                                  )}`}\n                                  .entityFilter=${(entityState: HassEntity) => {\n                                    const devId =\n                                      this._placeholderValues[type][\n                                        placeholder.index\n                                      ][idx].device_id;\n                                    return this._deviceEntityLookup[\n                                      devId\n                                    ].includes(entityState.entity_id);\n                                  }}\n                                ></ha-entity-picker>\n                              `\n                            )}\n                          `\n                        : \"\"}\n                    `;\n                  }\n                  if (placeholder.fields.includes(\"entity_id\")) {\n                    return html`\n                      <ha-entity-picker\n                        .type=${type}\n                        .placeholder=${placeholder}\n                        @change=${this._entityPicked}\n                        .includeDomains=${placeholder.domains}\n                        .includeDeviceClasses=${placeholder.device_classes}\n                        .hass=${this.hass}\n                        .label=${this._getLabel(\n                          placeholder.domains,\n                          placeholder.device_classes\n                        )}\n                      ></ha-entity-picker>\n                    `;\n                  }\n                  return html`\n                    <div class=\"error\">\n                      ${this.hass.localize(\n                        `ui.panel.config.automation.thingtalk.link_devices.unknown_placeholder`\n                      )}<br />\n                      ${placeholder.domains}<br />\n                      ${placeholder.fields.map(\n                        (field) => html` ${field}<br /> `\n                      )}\n                    </div>\n                  `;\n                })}\n              `\n          )}\n        </div>\n        <mwc-button @click=${this.skip} slot=\"secondaryAction\">\n          ${this.hass.localize(`ui.common.skip`)}\n        </mwc-button>\n        <mwc-button\n          @click=${this._done}\n          .disabled=${!this._isDone}\n          slot=\"primaryAction\"\n        >\n          ${this.hass.localize(`ui.panel.config.automation.thingtalk.create`)}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _getDeviceName(deviceId: string): string {\n    if (!this._devices) {\n      return \"\";\n    }\n    const foundDevice = this._devices.find((device) => device.id === deviceId);\n    if (!foundDevice) {\n      return \"\";\n    }\n    return foundDevice.name_by_user || foundDevice.name || \"\";\n  }\n\n  private _searchNames() {\n    if (!this._search || !this._areas || !this._devices) {\n      return;\n    }\n    this._search = false;\n    Object.entries(this.placeholders).forEach(([type, placeholders]) =>\n      placeholders.forEach((placeholder) => {\n        if (!placeholder.name) {\n          return;\n        }\n        const name = placeholder.name;\n        const foundArea = this._areas!.find((area) =>\n          area.name.toLowerCase().includes(name)\n        );\n        if (foundArea) {\n          applyPatch(\n            this._extraInfo,\n            [type, placeholder.index, \"area_id\"],\n            foundArea.area_id\n          );\n          this.requestUpdate(\"_extraInfo\");\n          return;\n        }\n        const foundDevices = this._devices!.filter((device) => {\n          const deviceName = device.name_by_user || device.name;\n          if (!deviceName) {\n            return false;\n          }\n          return deviceName.toLowerCase().includes(name);\n        });\n        if (foundDevices.length) {\n          applyPatch(\n            this._extraInfo,\n            [type, placeholder.index, \"device_ids\"],\n            foundDevices.map((device) => device.id)\n          );\n          this.requestUpdate(\"_extraInfo\");\n        }\n      })\n    );\n  }\n\n  private get _isDone(): boolean {\n    return Object.entries(this.placeholders).every(([type, placeholders]) =>\n      placeholders.every((placeholder) =>\n        placeholder.fields.every((field) => {\n          const entries: {\n            [key: number]: { device_id?: string; entity_id?: string };\n          } = getPath(this._placeholderValues, [type, placeholder.index]);\n          if (!entries) {\n            return false;\n          }\n          const values = Object.values(entries);\n          return values.every(\n            (entry) => entry[field] !== undefined && entry[field] !== \"\"\n          );\n        })\n      )\n    );\n  }\n\n  private _getLabel(domains: string[], deviceClasses?: string[]) {\n    return `${domains\n      .map((domain) => domainToName(this.hass.localize, domain))\n      .join(\", \")}${\n      deviceClasses ? ` of type ${deviceClasses.join(\", \")}` : \"\"\n    }`;\n  }\n\n  private _devicePicked(ev: CustomEvent): void {\n    const value: string[] = ev.detail.value;\n    if (!value) {\n      return;\n    }\n    const target = ev.target as any;\n    const placeholder = target.placeholder as Placeholder;\n    const type = target.type;\n\n    let oldValues = getPath(this._placeholderValues, [type, placeholder.index]);\n    if (oldValues) {\n      oldValues = Object.values(oldValues);\n    }\n    const oldExtraInfo = getPath(this._extraInfo, [type, placeholder.index]);\n\n    if (this._placeholderValues[type]) {\n      delete this._placeholderValues[type][placeholder.index];\n    }\n\n    if (this._extraInfo[type]) {\n      delete this._extraInfo[type][placeholder.index];\n    }\n\n    if (!value.length) {\n      this.requestUpdate(\"_placeholderValues\");\n      return;\n    }\n\n    value.forEach((deviceId, index) => {\n      let oldIndex;\n      if (oldValues) {\n        const oldDevice = oldValues.find((oldVal, idx) => {\n          oldIndex = idx;\n          return oldVal.device_id === deviceId;\n        });\n\n        if (oldDevice) {\n          applyPatch(\n            this._placeholderValues,\n            [type, placeholder.index, index],\n            oldDevice\n          );\n          if (oldExtraInfo) {\n            applyPatch(\n              this._extraInfo,\n              [type, placeholder.index, index],\n              oldExtraInfo[oldIndex]\n            );\n          }\n          return;\n        }\n      }\n\n      applyPatch(\n        this._placeholderValues,\n        [type, placeholder.index, index, \"device_id\"],\n        deviceId\n      );\n\n      if (!placeholder.fields.includes(\"entity_id\")) {\n        return;\n      }\n\n      const devEntities = this._deviceEntityLookup[deviceId];\n\n      const entities = devEntities.filter((eid) => {\n        if (placeholder.device_classes) {\n          const stateObj = this.hass.states[eid];\n          if (!stateObj) {\n            return false;\n          }\n          return (\n            placeholder.domains.includes(computeDomain(eid)) &&\n            stateObj.attributes.device_class &&\n            placeholder.device_classes.includes(\n              stateObj.attributes.device_class\n            )\n          );\n        }\n        return placeholder.domains.includes(computeDomain(eid));\n      });\n      if (entities.length === 0) {\n        // Should not happen because we filter the device picker on domain\n        this._error = `No ${placeholder.domains\n          .map((domain) => domainToName(this.hass.localize, domain))\n          .join(\", \")} entities found in this device.`;\n      } else if (entities.length === 1) {\n        applyPatch(\n          this._placeholderValues,\n          [type, placeholder.index, index, \"entity_id\"],\n          entities[0]\n        );\n        this.requestUpdate(\"_placeholderValues\");\n      } else {\n        delete this._placeholderValues[type][placeholder.index][index]\n          .entity_id;\n        applyPatch(\n          this._extraInfo,\n          [type, placeholder.index, \"manualEntity\", index],\n          true\n        );\n        this.requestUpdate(\"_placeholderValues\");\n      }\n    });\n  }\n\n  private _entityPicked(ev: Event): void {\n    const target = ev.target as any;\n    const placeholder = target.placeholder as Placeholder;\n    const value = target.value;\n    const type = target.type;\n    const index = target.index || 0;\n    applyPatch(\n      this._placeholderValues,\n      [type, placeholder.index, index, \"entity_id\"],\n      value\n    );\n    this.requestUpdate(\"_placeholderValues\");\n  }\n\n  private _done(): void {\n    fireEvent(this, \"placeholders-filled\", { value: this._placeholderValues });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          max-width: 500px;\n        }\n        mwc-button.left {\n          margin-right: auto;\n        }\n        h3 {\n          margin: 10px 0 0 0;\n          font-weight: 500;\n        }\n        .error {\n          color: var(--error-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-thingtalk-placeholders\": ThingTalkPlaceholders;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-circular-progress\";\nimport type { AutomationConfig } from \"../../../../data/automation\";\nimport { convertThingTalk } from \"../../../../data/cloud\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./ha-thingtalk-placeholders\";\nimport type { PlaceholderValues } from \"./ha-thingtalk-placeholders\";\nimport type { ThingtalkDialogParams } from \"./show-dialog-thingtalk\";\nimport \"../../../../components/ha-dialog\";\n\nexport interface Placeholder {\n  name: string;\n  index: number;\n  fields: string[];\n  domains: string[];\n  device_classes?: string[];\n}\n\nexport interface PlaceholderContainer {\n  [key: string]: Placeholder[];\n}\n\n@customElement(\"ha-dialog-thinktalk\")\nclass DialogThingtalk extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _params?: ThingtalkDialogParams;\n\n  @state() private _submitting = false;\n\n  @state() private _placeholders?: PlaceholderContainer;\n\n  @query(\"#input\") private _input?: PaperInputElement;\n\n  private _value?: string;\n\n  private _config!: Partial<AutomationConfig>;\n\n  public async showDialog(params: ThingtalkDialogParams): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    if (params.input) {\n      this._value = params.input;\n      await this.updateComplete;\n      this._generate();\n    }\n  }\n\n  public closeDialog() {\n    this._placeholders = undefined;\n    this._params = undefined;\n    if (this._input) {\n      this._input.value = null;\n    }\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  public closeInitDialog() {\n    if (this._placeholders) {\n      return;\n    }\n    this.closeDialog();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    if (this._placeholders) {\n      return html`\n        <ha-thingtalk-placeholders\n          .hass=${this.hass}\n          .placeholders=${this._placeholders}\n          .skip=${this._skip}\n          @closed=${this.closeDialog}\n          @placeholders-filled=${this._handlePlaceholders}\n        >\n        </ha-thingtalk-placeholders>\n      `;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeInitDialog}\n        .heading=${this.hass.localize(\n          `ui.panel.config.automation.thingtalk.task_selection.header`\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          ${this.hass.localize(\n            `ui.panel.config.automation.thingtalk.task_selection.introduction`\n          )}<br /><br />\n          ${this.hass.localize(\n            `ui.panel.config.automation.thingtalk.task_selection.language_note`\n          )}<br /><br />\n          ${this.hass.localize(\n            `ui.panel.config.automation.thingtalk.task_selection.for_example`\n          )}\n          <ul @click=${this._handleExampleClick}>\n            <li>\n              <button class=\"link\">\n                Turn off the lights when I leave home\n              </button>\n            </li>\n            <li>\n              <button class=\"link\">\n                Turn on the lights when the sun is set\n              </button>\n            </li>\n            <li>\n              <button class=\"link\">\n                Notify me if the door opens and I am not at home\n              </button>\n            </li>\n            <li>\n              <button class=\"link\">\n                Turn the light on when motion is detected\n              </button>\n            </li>\n          </ul>\n          <paper-input\n            id=\"input\"\n            label=\"What should this automation do?\"\n            .value=${this._value}\n            autofocus\n            @keyup=${this._handleKeyUp}\n          ></paper-input>\n          <a\n            href=\"https://almond.stanford.edu/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            class=\"attribution\"\n            >Powered by Almond</a\n          >\n        </div>\n        <mwc-button class=\"left\" @click=${this._skip} slot=\"secondaryAction\">\n          ${this.hass.localize(`ui.common.skip`)}\n        </mwc-button>\n        <mwc-button\n          @click=${this._generate}\n          .disabled=${this._submitting}\n          slot=\"primaryAction\"\n        >\n          ${this._submitting\n            ? html`<ha-circular-progress\n                active\n                size=\"small\"\n                title=\"Creating your automation...\"\n              ></ha-circular-progress>`\n            : \"\"}\n          ${this.hass.localize(`ui.panel.config.automation.thingtalk.create`)}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private async _generate() {\n    this._value = this._input!.value as string;\n    if (!this._value) {\n      this._error = this.hass.localize(\n        `ui.panel.config.automation.thingtalk.task_selection.error_empty`\n      );\n      return;\n    }\n    this._submitting = true;\n    let config: Partial<AutomationConfig>;\n    let placeholders: PlaceholderContainer;\n    try {\n      const result = await convertThingTalk(this.hass, this._value);\n      config = result.config;\n      placeholders = result.placeholders;\n    } catch (err: any) {\n      this._error = err.message;\n      this._submitting = false;\n      return;\n    }\n\n    this._submitting = false;\n\n    if (!Object.keys(config).length) {\n      this._error = this.hass.localize(\n        `ui.panel.config.automation.thingtalk.task_selection.error_unsupported`\n      );\n    } else if (Object.keys(placeholders).length) {\n      this._config = config;\n      this._placeholders = placeholders;\n    } else {\n      this._sendConfig(this._value, config);\n    }\n  }\n\n  private _handlePlaceholders(ev: CustomEvent) {\n    const placeholderValues = ev.detail.value as PlaceholderValues;\n    Object.entries(placeholderValues).forEach(([type, values]) => {\n      Object.entries(values).forEach(([index, placeholder]) => {\n        const devices = Object.values(placeholder);\n        if (devices.length === 1) {\n          Object.entries(devices[0]).forEach(([field, value]) => {\n            this._config[type][index][field] = value;\n          });\n          return;\n        }\n        const automation = { ...this._config[type][index] };\n        const newAutomations: any[] = [];\n        devices.forEach((fields) => {\n          const newAutomation = { ...automation };\n          Object.entries(fields).forEach(([field, value]) => {\n            newAutomation[field] = value;\n          });\n          newAutomations.push(newAutomation);\n        });\n        this._config[type].splice(index, 1, ...newAutomations);\n      });\n    });\n    this._sendConfig(this._value, this._config);\n  }\n\n  private _sendConfig(input, config) {\n    this._params!.callback({ alias: input, ...config });\n    this.closeDialog();\n  }\n\n  private _skip = () => {\n    this._params!.callback(undefined);\n    this.closeDialog();\n  };\n\n  private _handleKeyUp(ev: KeyboardEvent) {\n    if (ev.keyCode === 13) {\n      this._generate();\n    }\n  }\n\n  private _handleExampleClick(ev: Event) {\n    this._input!.value = (ev.target as HTMLAnchorElement).innerText;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-dialog {\n          max-width: 500px;\n        }\n        mwc-button.left {\n          margin-right: auto;\n        }\n        .error {\n          color: var(--error-color);\n        }\n        .attribution {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-thinktalk\": DialogThingtalk;\n  }\n}\n"],"names":[],"sourceRoot":""}