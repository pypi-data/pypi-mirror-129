{"version":3,"file":"c75951d1.js","mappings":";;;AAwQA;;;AAGA;AACA;;AAEA;AACA;;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAMA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAaA;;AAOA;AACA;;AAEA;AARA;;AAoBA;AACA;AAPA;AA2BA;AAIA;;AAYA;AAEA;AChTA;AACA;AACA;AACA;AACA;AACA;;AAWA;AACA;AACA;AACA;AACA;AAIA;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;;AAOA;AAFA;;AAgDA;AACA;AACA;AACA;AACA;AAEA;;;AAOA;;;;AAKA;;;AAGA;;;;;;AC9KA;;;AAMA","sources":["webpack://home-assistant-frontend/mwc-select-base.ts","webpack://home-assistant-frontend/slider-base.ts","webpack://home-assistant-frontend/slider-single-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-notched-outline';\nimport '@material/mwc-menu';\nimport '@material/mwc-icon/mwc-icon';\n\nimport {KEY, normalizeKey} from '@material/dom/keyboard';\nimport {MDCFloatingLabelFoundation} from '@material/floating-label/foundation';\nimport {MDCLineRippleFoundation} from '@material/line-ripple/foundation';\nimport * as typeahead from '@material/list/typeahead';\nimport {MDCListTextAndIndex} from '@material/list/types';\nimport {addHasRemoveClass, FormElement} from '@material/mwc-base/form-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {isNodeElement} from '@material/mwc-base/utils';\nimport {floatingLabel, FloatingLabel} from '@material/mwc-floating-label';\nimport {lineRipple, LineRipple} from '@material/mwc-line-ripple';\nimport {ListItemBase} from '@material/mwc-list/mwc-list-item-base';\nimport {Menu} from '@material/mwc-menu';\nimport {NotchedOutline} from '@material/mwc-notched-outline';\nimport {MDCSelectAdapter} from '@material/select/adapter';\nimport MDCSelectFoundation from '@material/select/foundation';\nimport {html, nothing} from 'lit';\nimport {eventOptions, property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\n// must be done to get past lit-analyzer checks\ndeclare global {\n  interface Element {\n    floatingLabelFoundation?: MDCFloatingLabelFoundation;\n    lineRippleFoundation?: MDCLineRippleFoundation;\n  }\n}\n\ntype CustomValidityState = {\n  -readonly[P in keyof ValidityState]: ValidityState[P]\n};\n\nconst createValidityObj =\n    (customValidity: Partial<ValidityState> = {}): ValidityState => {\n      /*\n       * We need to make ValidityState an object because it is readonly and\n       * we cannot use the spread operator. Also, we don't export\n       * `CustomValidityState` because it is a leaky implementation and the user\n       * already has access to `ValidityState` in lib.dom.ts. Also an interface\n       * {a: Type} can be casted to {readonly a: Type} so passing any object\n       * should be fine.\n       */\n      const objectifiedCustomValidity: Partial<CustomValidityState> = {};\n\n      // eslint-disable-next-line guard-for-in\n      for (const propName in customValidity) {\n        /*\n         * Casting is needed because ValidityState's props are all readonly and\n         * thus cannot be set on `onjectifiedCustomValidity`. In the end, the\n         * interface is the same as ValidityState (but not readonly), but the\n         * function signature casts the output to ValidityState (thus readonly).\n         */\n        objectifiedCustomValidity[propName as keyof CustomValidityState] =\n            customValidity[propName as keyof ValidityState];\n      }\n\n      return {\n        badInput: false,\n        customError: false,\n        patternMismatch: false,\n        rangeOverflow: false,\n        rangeUnderflow: false,\n        stepMismatch: false,\n        tooLong: false,\n        tooShort: false,\n        typeMismatch: false,\n        valid: true,\n        valueMissing: false,\n        ...objectifiedCustomValidity\n      };\n    };\n\n/**\n * @fires selected {SelectedDetail}\n * @fires action {ActionDetail}\n * @fires opened\n * @fires closed\n * @fires change\n * @fires invalid\n */\nexport abstract class SelectBase extends FormElement {\n  protected mdcFoundation!: MDCSelectFoundation;\n\n  protected readonly mdcFoundationClass = MDCSelectFoundation;\n\n  @query('.mdc-select') protected mdcRoot!: HTMLElement;\n\n  @query('.formElement') protected formElement!: HTMLInputElement;\n\n  @query('slot') protected slotElement!: HTMLSlotElement|null;\n\n  @query('select') protected nativeSelectElement!: HTMLSelectElement|null;\n\n  @query('input') protected nativeInputElement!: HTMLInputElement|null;\n\n  @query('.mdc-line-ripple') protected lineRippleElement!: LineRipple|null;\n\n  @query('.mdc-floating-label') protected labelElement!: FloatingLabel|null;\n\n  @query('mwc-notched-outline') protected outlineElement!: NotchedOutline|null;\n\n  @query('.mdc-menu') protected menuElement!: Menu|null;\n\n  @query('.mdc-select__anchor') protected anchorElement!: HTMLDivElement|null;\n\n  @property({type: Boolean, attribute: 'disabled', reflect: true})\n  @observer(function(this: SelectBase, value: boolean) {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.setDisabled(value);\n    }\n  })\n  override disabled = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SelectBase, _newVal: boolean, oldVal: boolean) {\n    if (oldVal !== undefined && this.outlined !== oldVal) {\n      this.layout(false);\n    }\n  })\n  outlined = false;\n\n  @property({type: String})\n  @observer(function(this: SelectBase, _newVal: string, oldVal: string) {\n    if (oldVal !== undefined && this.label !== oldVal) {\n      this.layout(false);\n    }\n  })\n  label = '';\n\n  @state() protected outlineOpen = false;\n\n  @state() protected outlineWidth = 0;\n\n  @property({type: String})\n  @observer(function(this: SelectBase, value: string) {\n    if (this.mdcFoundation) {\n      const initialization = this.selected === null && !!value;\n      const valueSetByUser = this.selected && this.selected.value !== value;\n\n      if (initialization || valueSetByUser) {\n        this.selectByValue(value);\n      }\n      this.reportValidity();\n    }\n  })\n  value = '';\n\n  @property() name = '';\n\n  @state() protected selectedText = '';\n\n  @property({type: String}) icon = '';\n\n  @state() protected menuOpen = false;\n\n  @property({type: String}) helper = '';\n\n  @property({type: Boolean}) validateOnInitialRender = false;\n\n  @property({type: String}) validationMessage = '';\n\n  @property({type: Boolean}) required = false;\n\n  @property({type: Boolean}) naturalMenuWidth = false;\n\n  @state() protected isUiValid = true;\n\n  @property({type: Boolean}) fixedMenuPosition = false;\n\n  // Transiently holds current typeahead prefix from user.\n  protected typeaheadState = typeahead.initState();\n  protected sortedIndexByFirstChar = new Map<string, MDCListTextAndIndex[]>();\n\n  protected menuElement_: Menu|null = null;\n\n  get items(): ListItemBase[] {\n    // memoize menuElement to prevent unnecessary querySelector calls.\n    if (!this.menuElement_) {\n      this.menuElement_ = this.menuElement;\n    }\n\n    if (this.menuElement_) {\n      return this.menuElement_.items;\n    }\n\n    return [];\n  }\n\n  get selected(): ListItemBase|null {\n    const menuElement = this.menuElement;\n    if (menuElement) {\n      return menuElement.selected as ListItemBase | null;\n    }\n\n    return null;\n  }\n\n  get index(): number {\n    const menuElement = this.menuElement;\n    if (menuElement) {\n      return menuElement.index as number;\n    }\n\n    return -1;\n  }\n\n  protected listeners: ({\n    target: Element;\n    name: string;\n    cb: EventListenerOrEventListenerObject;\n  })[] = [];\n  protected onBodyClickBound: (evt: MouseEvent) => void = () => undefined;\n  protected _menuUpdateComplete: null|Promise<unknown> = null;\n  protected get shouldRenderHelperText(): boolean {\n    return !!this.helper || !!this.validationMessage;\n  }\n\n  protected valueSetDirectly = false;\n\n  validityTransform:\n      ((value: string,\n        nativeValidity: ValidityState) => Partial<ValidityState>)|null = null;\n\n  protected _validity: ValidityState = createValidityObj();\n\n  get validity(): ValidityState {\n    this._checkValidity(this.value);\n\n    return this._validity;\n  }\n\n  override render() {\n    const classes = {\n      'mdc-select--disabled': this.disabled,\n      'mdc-select--no-label': !this.label,\n      'mdc-select--filled': !this.outlined,\n      'mdc-select--outlined': this.outlined,\n      'mdc-select--with-leading-icon': !!this.icon,\n      'mdc-select--required': this.required,\n      'mdc-select--invalid': !this.isUiValid,\n    };\n\n    const menuClasses = {\n      'mdc-select__menu--invalid': !this.isUiValid,\n    };\n\n    const labelledby = !!this.label ? 'label' : undefined;\n    const describedby = this.shouldRenderHelperText ? 'helper-text' : undefined;\n\n    return html`\n      <div\n          class=\"mdc-select ${classMap(classes)}\">\n        <input\n            class=\"formElement\"\n            name=\"${this.name}\"\n            .value=\"${this.value}\"\n            hidden\n            ?disabled=\"${this.disabled}\"\n            ?required=${this.required}>\n        <!-- @ts-ignore -->\n        <div class=\"mdc-select__anchor\"\n            aria-autocomplete=\"none\"\n            role=\"combobox\"\n            aria-expanded=${this.menuOpen}\n            aria-invalid=${!this.isUiValid}\n            aria-haspopup=\"listbox\"\n            aria-labelledby=${ifDefined(labelledby)}\n            aria-required=${this.required}\n            aria-describedby=${ifDefined(describedby)}\n            @click=${this.onClick}\n            @focus=${this.onFocus}\n            @blur=${this.onBlur}\n            @keydown=${this.onKeydown}>\n          ${this.renderRipple()}\n          ${this.outlined ? this.renderOutline() : this.renderLabel()}\n          ${this.renderLeadingIcon()}\n          <span class=\"mdc-select__selected-text-container\">\n            <span class=\"mdc-select__selected-text\">${this.selectedText}</span>\n          </span>\n          <span class=\"mdc-select__dropdown-icon\">\n            <svg\n                class=\"mdc-select__dropdown-icon-graphic\"\n                viewBox=\"7 10 10 5\"\n                focusable=\"false\">\n              <polygon\n                  class=\"mdc-select__dropdown-icon-inactive\"\n                  stroke=\"none\"\n                  fill-rule=\"evenodd\"\n                  points=\"7 10 12 15 17 10\">\n              </polygon>\n              <polygon\n                  class=\"mdc-select__dropdown-icon-active\"\n                  stroke=\"none\"\n                  fill-rule=\"evenodd\"\n                  points=\"7 15 12 10 17 15\">\n              </polygon>\n            </svg>\n          </span>\n          ${this.renderLineRipple()}\n        </div>\n        <mwc-menu\n            innerRole=\"listbox\"\n            wrapFocus\n            class=\"mdc-select__menu mdc-menu mdc-menu-surface ${\n        classMap(menuClasses)}\"\n            activatable\n            .fullwidth=${\n        this.fixedMenuPosition ? false : !this.naturalMenuWidth}\n            .open=${this.menuOpen}\n            .anchor=${this.anchorElement}\n            .fixed=${this.fixedMenuPosition}\n            @selected=${this.onSelected}\n            @opened=${this.onOpened}\n            @closed=${this.onClosed}\n            @items-updated=${this.onItemsUpdated}\n            @keydown=${this.handleTypeahead}>\n          <slot></slot>\n        </mwc-menu>\n      </div>\n      ${this.renderHelperText()}`;\n  }\n\n  protected renderRipple() {\n    if (this.outlined) {\n      return nothing;\n    }\n\n    return html`\n      <span class=\"mdc-select__ripple\"></span>\n    `;\n  }\n\n  protected renderOutline() {\n    if (!this.outlined) {\n      return nothing;\n    }\n\n    return html`\n      <mwc-notched-outline\n          .width=${this.outlineWidth}\n          .open=${this.outlineOpen}\n          class=\"mdc-notched-outline\">\n        ${this.renderLabel()}\n      </mwc-notched-outline>`;\n  }\n\n  protected renderLabel() {\n    if (!this.label) {\n      return nothing;\n    }\n\n    return html`\n      <span\n          .floatingLabelFoundation=${\n        floatingLabel(this.label) as unknown as MDCFloatingLabelFoundation}\n          id=\"label\">${this.label}</span>\n    `;\n  }\n\n  protected renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<mwc-icon class=\"mdc-select__icon\"><div>${\n        this.icon}</div></mwc-icon>`;\n  }\n\n  protected renderLineRipple() {\n    if (this.outlined) {\n      return nothing;\n    }\n\n    return html`\n      <span .lineRippleFoundation=${\n        lineRipple() as unknown as MDCLineRippleFoundation}></span>\n    `;\n  }\n\n  protected renderHelperText() {\n    if (!this.shouldRenderHelperText) {\n      return nothing;\n    }\n\n    const showValidationMessage = this.validationMessage && !this.isUiValid;\n    const classes = {\n      'mdc-select-helper-text--validation-msg': showValidationMessage,\n    };\n\n    return html`\n        <p\n          class=\"mdc-select-helper-text ${classMap(classes)}\"\n          id=\"helper-text\">${\n        showValidationMessage ? this.validationMessage : this.helper}</p>`;\n  }\n\n  protected createAdapter(): MDCSelectAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      activateBottomLine: () => {\n        if (this.lineRippleElement) {\n          this.lineRippleElement.lineRippleFoundation.activate();\n        }\n      },\n      deactivateBottomLine: () => {\n        if (this.lineRippleElement) {\n          this.lineRippleElement.lineRippleFoundation.deactivate();\n        }\n      },\n      hasLabel: () => {\n        return !!this.label;\n      },\n      floatLabel: (shouldFloat) => {\n        if (this.labelElement) {\n          this.labelElement.floatingLabelFoundation.float(shouldFloat);\n        }\n      },\n      getLabelWidth: () => {\n        if (this.labelElement) {\n          return this.labelElement.floatingLabelFoundation.getWidth();\n        }\n\n        return 0;\n      },\n      setLabelRequired: (isRequired) => {\n        if (this.labelElement) {\n          this.labelElement.floatingLabelFoundation.setRequired(isRequired);\n        }\n      },\n      hasOutline: () => this.outlined,\n      notchOutline: (labelWidth) => {\n        const outlineElement = this.outlineElement;\n        if (outlineElement && !this.outlineOpen) {\n          this.outlineWidth = labelWidth;\n          this.outlineOpen = true;\n        }\n      },\n      closeOutline: () => {\n        if (this.outlineElement) {\n          this.outlineOpen = false;\n        }\n      },\n      setRippleCenter: (normalizedX) => {\n        if (this.lineRippleElement) {\n          const foundation = this.lineRippleElement.lineRippleFoundation;\n          foundation.setRippleCenter(normalizedX);\n        }\n      },\n      notifyChange: async (value) => {\n        if (!this.valueSetDirectly && value === this.value) {\n          return;\n        }\n\n        this.valueSetDirectly = false;\n        this.value = value;\n        await this.updateComplete;\n        const ev = new Event('change', {bubbles: true});\n        this.dispatchEvent(ev);\n      },\n      setSelectedText: (value) => this.selectedText = value,\n      isSelectAnchorFocused: () => {\n        const selectAnchorElement = this.anchorElement;\n\n        if (!selectAnchorElement) {\n          return false;\n        }\n\n        const rootNode =\n            selectAnchorElement.getRootNode() as ShadowRoot | Document;\n\n        return rootNode.activeElement === selectAnchorElement;\n      },\n      getSelectAnchorAttr: (attr) => {\n        const selectAnchorElement = this.anchorElement;\n\n        if (!selectAnchorElement) {\n          return null;\n        }\n\n        return selectAnchorElement.getAttribute(attr);\n      },\n      setSelectAnchorAttr: (attr, value) => {\n        const selectAnchorElement = this.anchorElement;\n\n        if (!selectAnchorElement) {\n          return;\n        }\n\n        selectAnchorElement.setAttribute(attr, value);\n      },\n      removeSelectAnchorAttr: (attr) => {\n        const selectAnchorElement = this.anchorElement;\n\n        if (!selectAnchorElement) {\n          return;\n        }\n\n        selectAnchorElement.removeAttribute(attr);\n      },\n      openMenu: () => {\n        this.menuOpen = true;\n      },\n      closeMenu: () => {\n        this.menuOpen = false;\n      },\n      addMenuClass: () => undefined,\n      removeMenuClass: () => undefined,\n      getAnchorElement: () => this.anchorElement,\n      setMenuAnchorElement: () => {\n        /* Handled by anchor directive */\n      },\n      setMenuAnchorCorner: () => {\n        const menuElement = this.menuElement;\n        if (menuElement) {\n          menuElement.corner = 'BOTTOM_START';\n        }\n      },\n      setMenuWrapFocus: (wrapFocus) => {\n        const menuElement = this.menuElement;\n        if (menuElement) {\n          menuElement.wrapFocus = wrapFocus;\n        }\n      },\n      focusMenuItemAtIndex: (index) => {\n        const menuElement = this.menuElement;\n        if (!menuElement) {\n          return;\n        }\n\n        const element = menuElement.items[index];\n\n        if (!element) {\n          return;\n        }\n\n        (element as HTMLElement).focus();\n      },\n      getMenuItemCount: () => {\n        const menuElement = this.menuElement;\n\n        if (menuElement) {\n          return menuElement.items.length;\n        }\n\n        return 0;\n      },\n      getMenuItemValues: () => {\n        const menuElement = this.menuElement;\n\n        if (!menuElement) {\n          return [];\n        }\n\n        const items = menuElement.items;\n\n        return items.map((item) => item.value);\n      },\n      getMenuItemTextAtIndex: (index) => {\n        const menuElement = this.menuElement;\n        if (!menuElement) {\n          return '';\n        }\n\n        const element = menuElement.items[index];\n\n        if (!element) {\n          return '';\n        }\n\n        return element.text;\n      },\n      getSelectedIndex: () => this.index,\n      setSelectedIndex: () => undefined,\n      isTypeaheadInProgress: () =>\n          typeahead.isTypingInProgress(this.typeaheadState),\n      typeaheadMatchItem: (nextChar, startingIndex) => {\n        if (!this.menuElement) {\n          return -1;\n        }\n\n        const opts: typeahead.TypeaheadMatchItemOpts = {\n          focusItemAtIndex: (index) => {\n            this.menuElement!.focusItemAtIndex(index);\n          },\n          focusedItemIndex: startingIndex ?\n              startingIndex :\n              this.menuElement.getFocusedItemIndex(),\n          nextChar,\n          sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n          skipFocus: false,\n          isItemAtIndexDisabled: (index) => this.items[index].disabled,\n        };\n\n        const index = typeahead.matchItem(opts, this.typeaheadState);\n\n        if (index !== -1) {\n          this.select(index);\n        }\n\n        return index;\n      },\n    };\n  }\n\n  checkValidity(): boolean {\n    const isValid = this._checkValidity(this.value);\n\n    if (!isValid) {\n      const invalidEvent =\n          new Event('invalid', {bubbles: false, cancelable: true});\n      this.dispatchEvent(invalidEvent);\n    }\n\n    return isValid;\n  }\n\n  reportValidity(): boolean {\n    const isValid = this.checkValidity();\n\n    this.isUiValid = isValid;\n\n    return isValid;\n  }\n\n  protected _checkValidity(value: string) {\n    const nativeValidity = this.formElement.validity;\n\n    let validity = createValidityObj(nativeValidity);\n\n    if (this.validityTransform) {\n      const customValidity = this.validityTransform(value, validity);\n      validity = {...validity, ...customValidity};\n    }\n\n    this._validity = validity;\n\n    return this._validity.valid;\n  }\n\n  setCustomValidity(message: string) {\n    this.validationMessage = message;\n    this.formElement.setCustomValidity(message);\n  }\n\n  // tslint:disable:ban-ts-ignore\n  protected override async getUpdateComplete() {\n    await this._menuUpdateComplete;\n    // @ts-ignore\n    const result = await super.getUpdateComplete();\n    return result;\n  }\n  // tslint:enable:ban-ts-ignore\n\n  protected override async firstUpdated() {\n    const menuElement = this.menuElement;\n\n    if (menuElement) {\n      this._menuUpdateComplete = menuElement.updateComplete;\n      await this._menuUpdateComplete;\n    }\n\n    super.firstUpdated();\n\n    this.mdcFoundation.isValid = () => true;\n    this.mdcFoundation.setValid = () => undefined;\n    this.mdcFoundation.setDisabled(this.disabled);\n\n    if (this.validateOnInitialRender) {\n      this.reportValidity();\n    }\n\n    // Select an option based on init value\n    if (!this.selected) {\n      if (!this.items.length && this.slotElement &&\n          this.slotElement.assignedNodes({flatten: true}).length) {\n        // Shady DOM initial render fix\n        await new Promise((res) => requestAnimationFrame(res));\n        await this.layout();\n      }\n\n      const hasEmptyFirstOption =\n          this.items.length && this.items[0].value === '';\n      if (!this.value && hasEmptyFirstOption) {\n        this.select(0);\n        return;\n      }\n\n      this.selectByValue(this.value);\n    }\n\n    this.sortedIndexByFirstChar = typeahead.initSortedIndex(\n        this.items.length, (index) => this.items[index].text);\n  }\n\n  protected onItemsUpdated() {\n    this.sortedIndexByFirstChar = typeahead.initSortedIndex(\n        this.items.length, (index) => this.items[index].text);\n  }\n\n  select(index: number) {\n    const menuElement = this.menuElement;\n\n    if (menuElement) {\n      menuElement.select(index);\n    }\n  }\n\n  protected selectByValue(value: string) {\n    let indexToSelect = -1;\n    for (let i = 0; i < this.items.length; i++) {\n      const item = this.items[i];\n      if (item.value === value) {\n        indexToSelect = i;\n        break;\n      }\n    }\n    this.valueSetDirectly = true;\n    this.select(indexToSelect);\n    this.mdcFoundation.handleChange();\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n\n    for (const listener of this.listeners) {\n      listener.target.removeEventListener(listener.name, listener.cb);\n    }\n  }\n\n  override focus() {\n    const focusEvt = new CustomEvent('focus');\n    const selectAnchorElement = this.anchorElement;\n\n    if (selectAnchorElement) {\n      selectAnchorElement.dispatchEvent(focusEvt);\n      selectAnchorElement.focus();\n    }\n  }\n\n  override blur() {\n    const focusEvt = new CustomEvent('blur');\n    const selectAnchorElement = this.anchorElement;\n\n    if (selectAnchorElement) {\n      selectAnchorElement.dispatchEvent(focusEvt);\n      selectAnchorElement.blur();\n    }\n  }\n\n  protected onFocus() {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.handleFocus();\n    }\n  }\n\n  protected onBlur() {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.handleBlur();\n    }\n\n    const menuElement = this.menuElement;\n\n    if (menuElement && !menuElement.open) {\n      this.reportValidity();\n    }\n  }\n\n  protected onClick(evt: MouseEvent|TouchEvent) {\n    if (this.mdcFoundation) {\n      this.focus();\n      const targetClientRect = (evt.target as Element).getBoundingClientRect();\n      let xCoord = 0;\n\n      if ('touches' in evt) {\n        xCoord = evt.touches[0].clientX;\n      } else {\n        xCoord = evt.clientX;\n      }\n\n      const normalizedX = xCoord - targetClientRect.left;\n      this.mdcFoundation.handleClick(normalizedX);\n    }\n  }\n\n  protected onKeydown(evt: KeyboardEvent) {\n    const arrowUp = normalizeKey(evt) === KEY.ARROW_UP;\n    const arrowDown = normalizeKey(evt) === KEY.ARROW_DOWN;\n\n    if (arrowDown || arrowUp) {\n      const shouldSelectNextItem = arrowUp && this.index > 0;\n      const shouldSelectPrevItem =\n          arrowDown && this.index < this.items.length - 1;\n\n      if (shouldSelectNextItem) {\n        this.select(this.index - 1);\n      } else if (shouldSelectPrevItem) {\n        this.select(this.index + 1);\n      }\n      evt.preventDefault();\n\n      this.mdcFoundation.openMenu();\n      return;\n    }\n\n    this.mdcFoundation.handleKeydown(evt);\n  }\n\n  // must capture to run before list foundation captures event\n  @eventOptions({capture: true})\n  protected handleTypeahead(event: KeyboardEvent) {\n    if (!this.menuElement) {\n      return;\n    }\n\n    const focusedItemIndex = this.menuElement.getFocusedItemIndex();\n    const target = isNodeElement(event.target as Node) ?\n        event.target as HTMLElement :\n        null;\n    const isTargetListItem =\n        target ? target.hasAttribute('mwc-list-item') : false;\n\n    const opts: typeahead.HandleKeydownOpts = {\n      event,\n      focusItemAtIndex: (index) => {\n        this.menuElement!.focusItemAtIndex(index);\n      },\n      focusedItemIndex,\n      isTargetListItem,\n      sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n      isItemAtIndexDisabled: (index) => this.items[index].disabled,\n    };\n\n    typeahead.handleKeydown(opts, this.typeaheadState);\n  }\n\n  protected async onSelected(event: CustomEvent<{index: number}>) {\n    if (!this.mdcFoundation) {\n      await this.updateComplete;\n    }\n\n    this.mdcFoundation.handleMenuItemAction(event.detail.index);\n    const item = this.items[event.detail.index];\n    if (item) {\n      this.value = item.value;\n    }\n  }\n\n  protected onOpened() {\n    if (this.mdcFoundation) {\n      this.menuOpen = true;\n      this.mdcFoundation.handleMenuOpened();\n    }\n  }\n\n  protected onClosed() {\n    if (this.mdcFoundation) {\n      this.menuOpen = false;\n      this.mdcFoundation.handleMenuClosed();\n    }\n  }\n\n  protected setFormData(formData: FormData) {\n    if (this.name && this.selected !== null) {\n      formData.append(this.name, this.value);\n    }\n  }\n\n  async layout(updateItems = true) {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.layout();\n    }\n\n    await this.updateComplete;\n\n    const menuElement = this.menuElement;\n\n    if (menuElement) {\n      menuElement.layout(updateItems);\n    }\n\n    const labelElement = this.labelElement;\n\n    if (!labelElement) {\n      this.outlineOpen = false;\n      return;\n    }\n\n    const shouldFloat = !!this.label && !!this.value;\n    labelElement.floatingLabelFoundation.float(shouldFloat);\n\n    if (!this.outlined) {\n      return;\n    }\n\n    this.outlineOpen = shouldFloat;\n    await this.updateComplete;\n\n    /* When the textfield automatically notches due to a value and label\n     * being defined, the textfield may be set to `display: none` by the user.\n     * this means that the notch is of size 0px. We provide this function so\n     * that the user may manually resize the notch to the floated label's\n     * width.\n     */\n    const labelWidth = labelElement.floatingLabelFoundation.getWidth();\n    if (this.outlineOpen) {\n      this.outlineWidth = labelWidth;\n    }\n  }\n\n  async layoutOptions() {\n    if (!this.mdcFoundation) {\n      return;\n    }\n\n    this.mdcFoundation.layoutOptions();\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {FormElement} from '@material/mwc-base/form-element';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {MDCSliderFoundation} from '@material/slider/foundation';\nimport {Thumb, TickMark} from '@material/slider/types';\nimport {html, nothing, PropertyValues, TemplateResult} from 'lit';\nimport {property, query, queryAsync, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\nexport {Thumb} from '@material/slider/types';\n\nexport class SliderBase extends FormElement {\n  protected mdcFoundation!: MDCSliderFoundation;\n  protected readonly mdcFoundationClass = MDCSliderFoundation;\n  @query('input.end') protected formElement!: HTMLInputElement;\n  @query('.mdc-slider') protected mdcRoot!: HTMLElement;\n  @query('.end.mdc-slider__thumb') protected endThumb!: HTMLElement;\n  @query('.end.mdc-slider__thumb .mdc-slider__thumb-knob')\n  protected endThumbKnob!: HTMLElement;\n  @queryAsync('.end .ripple') protected endRipple!: Promise<Ripple|null>;\n  @property({type: Boolean, reflect: true}) override disabled = false;\n  @property({type: Number}) min = 0;\n  @property({type: Number}) max = 100;\n  @property({type: Number}) valueEnd = 0;\n  @property({type: String}) name = '';\n  @property({type: Number}) step: number = 1;\n  @property({type: Boolean}) withTickMarks: boolean = false;\n  @property({type: Boolean}) discrete: boolean = false;\n  @state() protected tickMarks: TickMark[] = [];\n  @state() protected trackTransformOriginStyle: string = '';\n  @state() protected trackLeftStyle: string = '';\n  @state() protected trackRightStyle: string = '';\n  @state() protected trackTransitionStyle: string = '';\n  @state() protected endThumbWithIndicator = false;\n  @state() protected endThumbTop = false;\n  @state() protected shouldRenderEndRipple = false;\n  @state() protected endThumbTransformStyle: string = '';\n  @state() protected endThumbTransitionStyle: string = '';\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-label'})\n  ariaLabel!: string;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-labelledby'})\n  ariaLabelledBy!: string;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-describedby'})\n  ariaDescribedBy!: string;\n\n  valueToAriaTextTransform: ((value: number) => string)|null = null;\n  valueToValueIndicatorTransform: ((value: number) => string) = (value) => {\n    return `${value}`;\n  };\n\n  private boundMoveListener:\n      ((event: PointerEvent|MouseEvent|TouchEvent) => void)|null = null;\n\n  protected endRippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderEndRipple = true;\n    return this.endRipple;\n  });\n\n  override update(changed: PropertyValues) {\n    if (changed.has('valueEnd') && this.mdcFoundation) {\n      this.mdcFoundation.setValue(this.valueEnd);\n      const validVal = this.mdcFoundation.getValue();\n\n      if (validVal !== this.valueEnd) {\n        this.valueEnd = validVal;\n      }\n    }\n\n    if (changed.has('discrete')) {\n      if (!this.discrete) {\n        this.tickMarks = [];\n      }\n    }\n\n    super.update(changed);\n  }\n\n  protected override render() {\n    return this.renderRootEl(html`\n      ${this.renderStartInput()}\n      ${this.renderEndInput()}\n      ${this.renderTrack()}\n      ${this.renderTickMarks()}\n      ${this.renderStartThumb()}\n      ${this.renderEndThumb()}`);\n  }\n\n  protected renderRootEl(content: TemplateResult) {\n    const rootClasses = classMap({\n      'mdc-slider--disabled': this.disabled,\n      'mdc-slider--discrete': this.discrete,\n    });\n\n    return html`\n    <div\n        class=\"mdc-slider ${rootClasses}\"\n        @pointerdown=${this.onPointerdown}\n        @pointerup=${this.onPointerup}\n        @contextmenu=${this.onContextmenu}>\n      ${content}\n    </div>`;\n  }\n\n  protected renderStartInput(): typeof nothing|TemplateResult {\n    return nothing;\n  }\n\n  protected renderEndInput() {\n    return html`\n      <input\n          class=\"mdc-slider__input end\"\n          type=\"range\"\n          step=${this.step}\n          min=${this.min}\n          max=${this.max}\n          .value=${this.valueEnd as unknown as string}\n          @change=${this.onEndChange}\n          @focus=${this.onEndFocus}\n          @blur=${this.onEndBlur}\n          ?disabled=${this.disabled}\n          name=${this.name}\n          aria-label=${ifDefined(this.ariaLabel)}\n          aria-labelledby=${ifDefined(this.ariaLabelledBy)}\n          aria-describedby=${ifDefined(this.ariaDescribedBy)}\n          aria-valuetext=${\n        ifDefined(this.valueToAriaTextTransform?.(this.valueEnd))}>\n    `;\n  }\n\n  protected renderTrack(): typeof nothing|TemplateResult {\n    return nothing;\n  }\n\n  protected renderTickMarks() {\n    return !this.withTickMarks ? nothing : html`\n      <div class=\"mdc-slider__tick-marks\">\n        ${this.tickMarks.map((tickMark) => {\n      const isActive = tickMark === TickMark.ACTIVE;\n\n      return html`<div class=\"${\n          isActive ? 'mdc-slider__tick-mark--active' :\n                     'mdc-slider__tick-mark--inactive'}\"></div>`;\n    })}\n      </div>`;\n  }\n\n  protected renderStartThumb(): typeof nothing|TemplateResult {\n    return nothing;\n  }\n\n  protected renderEndThumb() {\n    const endThumbClasses = classMap({\n      'mdc-slider__thumb--with-indicator': this.endThumbWithIndicator,\n      'mdc-slider__thumb--top': this.endThumbTop,\n    });\n\n    const endThumbStyles = styleMap({\n      '-webkit-transform': this.endThumbTransformStyle,\n      'transform': this.endThumbTransformStyle,\n      '-webkit-transition': this.endThumbTransitionStyle,\n      'transition': this.endThumbTransitionStyle,\n      'left': this.endThumbTransformStyle ?\n          '' :\n          getComputedStyle(this).direction === 'rtl' ?\n          '' :\n          `calc(${\n              (this.valueEnd - this.min) / (this.max - this.min) *\n              100}% - 24px)`,\n      'right': this.endThumbTransformStyle ?\n          '' :\n          getComputedStyle(this).direction !== 'rtl' ?\n          '' :\n          `calc(${\n              (this.valueEnd - this.min) / (this.max - this.min) *\n              100}% - 24px)`,\n    });\n\n    const ripple = !this.shouldRenderEndRipple ?\n        nothing :\n        html`<mwc-ripple class=\"ripple\" unbounded></mwc-ripple>`;\n    return html`\n      <div\n          class=\"mdc-slider__thumb end ${endThumbClasses}\"\n          style=${endThumbStyles}\n          @mouseenter=${this.onEndMouseenter}\n          @mouseleave=${this.onEndMouseleave}>\n        ${ripple}\n        ${\n        this.renderValueIndicator(\n            this.valueToValueIndicatorTransform(this.valueEnd))}\n        <div class=\"mdc-slider__thumb-knob\"></div>\n      </div>\n    `;\n  }\n\n  protected renderValueIndicator(text: string|number|null) {\n    return this.discrete ? html`\n    <div class=\"mdc-slider__value-indicator-container\" aria-hidden=\"true\">\n      <div class=\"mdc-slider__value-indicator\">\n        <span class=\"mdc-slider__value-indicator-text\">\n          ${text}\n        </span>\n      </div>\n    </div>` :\n                           nothing;\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.mdcFoundation) {\n      this.mdcFoundation.destroy();\n    }\n  }\n\n  protected createAdapter() {}\n\n  override async firstUpdated() {\n    super.firstUpdated();\n    await this.layout(true);\n  }\n\n  override updated(changed: PropertyValues) {\n    super.updated(changed);\n\n    if (!this.mdcFoundation) {\n      return;\n    }\n\n    if (changed.has('disabled')) {\n      this.mdcFoundation.setDisabled(this.disabled);\n    }\n\n    if (changed.has('min')) {\n      this.mdcFoundation.setMin(this.min);\n    }\n\n    if (changed.has('max')) {\n      this.mdcFoundation.setMax(this.max);\n    }\n\n    if (changed.has('step')) {\n      this.mdcFoundation.setStep(this.step);\n    }\n\n    if (changed.has('discrete')) {\n      this.mdcFoundation.setIsDiscrete(this.discrete);\n    }\n\n    if (changed.has('withTickMarks')) {\n      this.mdcFoundation.setHasTickMarks(this.withTickMarks);\n    }\n  }\n\n  async layout(skipUpdateUI = false) {\n    this.mdcFoundation?.layout({skipUpdateUI});\n    this.requestUpdate();\n    await this.updateComplete;\n  }\n\n  protected onEndChange(e: Event) {\n    this.valueEnd = Number((e.target as HTMLInputElement).value);\n    this.mdcFoundation?.handleInputChange(Thumb.END);\n  }\n\n  protected onEndFocus() {\n    this.mdcFoundation?.handleInputFocus(Thumb.END);\n    this.endRippleHandlers.startFocus();\n  }\n\n  protected onEndBlur() {\n    this.mdcFoundation?.handleInputBlur(Thumb.END);\n    this.endRippleHandlers.endFocus();\n  }\n\n  protected onEndMouseenter() {\n    this.mdcFoundation?.handleThumbMouseenter();\n    this.endRippleHandlers.startHover();\n  }\n\n  protected onEndMouseleave() {\n    this.mdcFoundation?.handleThumbMouseleave();\n    this.endRippleHandlers.endHover();\n  }\n\n  protected onPointerdown(e: PointerEvent) {\n    this.layout();\n\n    if (this.mdcFoundation) {\n      this.mdcFoundation.handlePointerdown(e);\n      this.boundMoveListener =\n          this.mdcFoundation.handleMove.bind(this.mdcFoundation);\n      this.mdcRoot.addEventListener('pointermove', this.boundMoveListener);\n    }\n  }\n\n  protected onPointerup() {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.handleUp();\n      if (this.boundMoveListener) {\n        this.mdcRoot.removeEventListener('pointermove', this.boundMoveListener);\n        this.boundMoveListener = null;\n      }\n    }\n  }\n\n  protected onContextmenu(e: Event) {\n    // prevents context menu otherwise pointerdown will fire but not pointerup\n    e.preventDefault();\n  }\n\n  protected setFormData(formData: FormData) {\n    if (this.name) {\n      formData.append(this.name, `${this.valueEnd}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {deepActiveElementPath} from '@material/mwc-base/utils';\nimport {MDCSliderAdapter} from '@material/slider/adapter';\nimport {Thumb, TickMark} from '@material/slider/types';\nimport {html} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\nimport {SliderBase} from './slider-base';\n\nexport {Thumb} from '@material/slider/types';\n\n\nexport class SliderSingleBase extends SliderBase {\n  @property({type: Number})\n  get value(): number {\n    return this.valueEnd;\n  }\n\n  set value(newVal: number) {\n    this.valueEnd = newVal;\n  }\n\n  protected override renderTrack() {\n    const trackStyles = styleMap({\n      'transform-origin': this.trackTransformOriginStyle,\n      'left': this.trackLeftStyle,\n      'right': this.trackRightStyle,\n      '-webkit-transform':\n          `scaleX(${(this.valueEnd - this.min) / (this.max - this.min)})`,\n      'transform':\n          `scaleX(${(this.valueEnd - this.min) / (this.max - this.min)})`,\n      '-webkit-transition': this.trackTransitionStyle,\n      'transition': this.trackTransitionStyle,\n    });\n\n    return html`\n      <div class=\"mdc-slider__track\">\n        <div class=\"mdc-slider__track--inactive\"></div>\n        <div class=\"mdc-slider__track--active\">\n          <div\n              class=\"mdc-slider__track--active_fill\"\n              style=${trackStyles}>\n          </div>\n        </div>\n      </div>`;\n  }\n\n  protected override createAdapter(): MDCSliderAdapter {\n    return {\n      addClass: (className) => {\n        switch (className) {\n          case 'mdc-slider--disabled':\n            this.disabled = true;\n            break;\n        }\n      },\n      removeClass: (className) => {\n        switch (className) {\n          case 'mdc-slider--disabled':\n            this.disabled = false;\n            break;\n        }\n      },\n      hasClass: (className) => {\n        switch (className) {\n          case 'mdc-slider--disabled':\n            return this.disabled;\n          case 'mdc-slider--discrete':\n            return this.discrete;\n          default:\n            return false;\n        }\n      },\n      addThumbClass: (className, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        switch (className) {\n          case 'mdc-slider__thumb--with-indicator':\n            this.endThumbWithIndicator = true;\n            break;\n        }\n      },\n      removeThumbClass: (className, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        switch (className) {\n          case 'mdc-slider__thumb--with-indicator':\n            this.endThumbWithIndicator = false;\n            break;\n        }\n      },\n      registerEventHandler: () => {\n        // handled in bindings\n      },\n      deregisterEventHandler: () => {\n        // handled in bindings\n      },\n      registerBodyEventHandler: (eventName, handler) => {\n        document.body.addEventListener(eventName, handler);\n      },\n      deregisterBodyEventHandler: (eventName, handler) => {\n        document.body.removeEventListener(eventName, handler);\n      },\n      registerInputEventHandler: (thumb, eventName, handler) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        this.formElement.addEventListener(eventName, handler);\n      },\n      deregisterInputEventHandler: (thumb, eventName, handler) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        this.formElement.removeEventListener(eventName, handler);\n      },\n      registerThumbEventHandler: () => {\n        // handled by bindings\n      },\n      deregisterThumbEventHandler: () => {\n        // handled by bindings\n      },\n      registerWindowEventHandler: (eventName, handler) => {\n        window.addEventListener(eventName, handler);\n      },\n      deregisterWindowEventHandler: (eventName, handler) => {\n        window.addEventListener(eventName, handler);\n      },\n      emitChangeEvent: (value, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        const event = new CustomEvent(\n            'change', {bubbles: true, composed: true, detail: {value, thumb}});\n        this.dispatchEvent(event)\n      },\n      emitDragEndEvent: (_value, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n        // Emitting event is not yet implemented. See issue:\n        // https://github.com/material-components/material-components-web/issues/6448\n\n        this.endRippleHandlers.endPress();\n      },\n      emitDragStartEvent: (_value, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n        // Emitting event is not yet implemented. See issue:\n        // https://github.com/material-components/material-components-web/issues/6448\n\n        this.endRippleHandlers.startPress();\n      },\n      emitInputEvent: (value, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        const event = new CustomEvent(\n            'input', {bubbles: true, composed: true, detail: {value, thumb}});\n        this.dispatchEvent(event)\n      },\n      focusInput: (thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        this.formElement.focus();\n      },\n      getAttribute: () => {\n        // never seems to actually be used\n        return '';\n      },\n      getBoundingClientRect: () => {\n        return this.mdcRoot.getBoundingClientRect();\n      },\n      getInputAttribute: (attrName, thumb) => {\n        if (thumb === Thumb.START) {\n          return null;\n        }\n\n        switch (attrName) {\n          case 'min':\n            return this.min.toString();\n          case 'max':\n            return this.max.toString();\n          case 'value':\n            return this.valueEnd.toString();\n          case 'step':\n            return this.step.toString();\n          default:\n            return null;\n        }\n      },\n      getInputValue: (thumb) => {\n        if (thumb === Thumb.START) {\n          return '';\n        }\n\n        return this.valueEnd.toString();\n      },\n      getThumbBoundingClientRect: (thumb) => {\n        if (thumb === Thumb.START) {\n          return this.getBoundingClientRect();\n        }\n\n        return this.endThumb.getBoundingClientRect();\n      },\n      getThumbKnobWidth: (thumb) => {\n        if (thumb === Thumb.START) {\n          return 0;\n        }\n\n        return this.endThumbKnob.getBoundingClientRect().width;\n      },\n      getValueToAriaValueTextFn: () => {\n        return this.valueToAriaTextTransform\n      },\n      isInputFocused: (thumb) => {\n        if (thumb === Thumb.START) {\n          return false;\n        }\n\n        const activeElements = deepActiveElementPath();\n        return activeElements[activeElements.length - 1] === this.formElement;\n      },\n      isRTL: () => {\n        return getComputedStyle(this).direction === 'rtl';\n      },\n      setInputAttribute: (attribute, _value, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        switch (attribute) {\n          case 'disabled':\n          case 'value':\n          case 'aria-valuetext':\n            // handled by bindings\n            break;\n        }\n      },\n      removeInputAttribute: (attribute) => {\n        switch (attribute) {\n          case 'disabled':\n            // handled by bindings\n            break;\n        }\n      },\n      setThumbStyleProperty: (name, value, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        switch (name) {\n          case 'transform':\n          case '-webkit-transform':\n            this.endThumbTransformStyle = value;\n            break;\n          case 'transition':\n          case '-webkit-transition':\n            this.endThumbTransitionStyle = value;\n            break;\n        }\n      },\n      removeThumbStyleProperty: (name, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        switch (name) {\n          case 'left':\n          case 'right':\n            // handled by bindings\n            break;\n          case 'transition':\n          case '-webkit-transition':\n            this.endThumbTransitionStyle = '';\n            break;\n        }\n      },\n      setTrackActiveStyleProperty: (name, value) => {\n        switch (name) {\n          case 'transform-origin':\n            this.trackTransformOriginStyle = value;\n            break;\n          case 'left':\n            this.trackLeftStyle = value;\n            break;\n          case 'right':\n            this.trackRightStyle = value;\n            break;\n          case 'transform':\n          case '-webkit-transform':\n            // handled by bindings\n            break;\n          case 'transition':\n          case '-webkit-transition':\n            this.trackTransitionStyle = value;\n            break;\n        }\n      },\n      removeTrackActiveStyleProperty: (name) => {\n        switch (name) {\n          case 'transition':\n          case '-webkit-transition':\n            this.trackTransitionStyle = '';\n            break;\n        }\n      },\n      setInputValue: (value, thumb) => {\n        if (thumb === Thumb.START) {\n          return;\n        }\n\n        this.valueEnd = Number(value);\n      },\n      setPointerCapture: (pointerId) => {\n        this.mdcRoot.setPointerCapture(pointerId);\n      },\n      setValueIndicatorText: () => {\n        // handled by bindings\n      },\n      updateTickMarks: (tickMarks: TickMark[]) => {\n        this.tickMarks = tickMarks;\n      },\n    };\n  }\n}\n"],"names":[],"sourceRoot":""}