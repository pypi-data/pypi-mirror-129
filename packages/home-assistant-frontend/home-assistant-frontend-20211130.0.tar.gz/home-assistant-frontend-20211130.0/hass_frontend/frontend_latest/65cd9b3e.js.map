{"version":3,"file":"65cd9b3e.js","mappings":";;AAmQA;;AAKA;;AAEA;;;;AAMA;;AAGA;AACA;;AAEA;AACA;AAGA;;;;;;;AAYA;AACA;;AAEA;;;AAGA;;AAGA;AAGA;AACA;AAGA;;;AAGA;AACA;;;;;;;;;AA/PA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-area-card.ts"],"sourcesContent":["import \"@material/mwc-ripple\";\nimport type { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { navigate } from \"../../../common/navigate\";\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-state-icon\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../../data/area_registry\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../../data/entity_registry\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { toggleEntity } from \"../common/entity/toggle-entity\";\nimport \"../components/hui-warning\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { AreaCardConfig } from \"./types\";\n\nconst SENSOR_DOMAINS = new Set([\"sensor\", \"binary_sensor\"]);\n\nconst SENSOR_DEVICE_CLASSES = new Set([\n  \"temperature\",\n  \"humidity\",\n  \"motion\",\n  \"door\",\n  \"aqi\",\n]);\n\nconst TOGGLE_DOMAINS = new Set([\"light\", \"fan\", \"switch\"]);\n\n@customElement(\"hui-area-card\")\nexport class HuiAreaCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-area-card-editor\");\n    return document.createElement(\"hui-area-card-editor\");\n  }\n\n  public static getStubConfig(): AreaCardConfig {\n    return { type: \"area\", area: \"\" };\n  }\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: AreaCardConfig;\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  private _memberships = memoizeOne(\n    (\n      areaId: string,\n      devicesInArea: Set<string>,\n      registryEntities: EntityRegistryEntry[],\n      states: HomeAssistant[\"states\"]\n    ) => {\n      const entitiesInArea = registryEntities\n        .filter(\n          (entry) =>\n            !entry.entity_category &&\n            (entry.area_id\n              ? entry.area_id === areaId\n              : entry.device_id && devicesInArea.has(entry.device_id))\n        )\n        .map((entry) => entry.entity_id);\n\n      const sensorEntities: HassEntity[] = [];\n      const entitiesToggle: HassEntity[] = [];\n\n      for (const entity of entitiesInArea) {\n        const domain = computeDomain(entity);\n        if (!TOGGLE_DOMAINS.has(domain) && !SENSOR_DOMAINS.has(domain)) {\n          continue;\n        }\n\n        const stateObj: HassEntity | undefined = states[entity];\n\n        if (!stateObj) {\n          continue;\n        }\n\n        if (entitiesToggle.length < 3 && TOGGLE_DOMAINS.has(domain)) {\n          entitiesToggle.push(stateObj);\n          continue;\n        }\n\n        if (\n          sensorEntities.length < 3 &&\n          SENSOR_DOMAINS.has(domain) &&\n          stateObj.attributes.device_class &&\n          SENSOR_DEVICE_CLASSES.has(stateObj.attributes.device_class)\n        ) {\n          sensorEntities.push(stateObj);\n        }\n\n        if (sensorEntities.length === 3 && entitiesToggle.length === 3) {\n          break;\n        }\n      }\n\n      return { sensorEntities, entitiesToggle };\n    }\n  );\n\n  private _area = memoizeOne(\n    (areaId: string | undefined, areas: AreaRegistryEntry[]) =>\n      areas.find((area) => area.area_id === areaId) || null\n  );\n\n  private _devicesInArea = memoizeOne(\n    (areaId: string | undefined, devices: DeviceRegistryEntry[]) =>\n      new Set(\n        areaId\n          ? devices\n              .filter((device) => device.area_id === areaId)\n              .map((device) => device.id)\n          : []\n      )\n  );\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeAreaRegistry(this.hass!.connection, (areas) => {\n        this._areas = areas;\n      }),\n      subscribeDeviceRegistry(this.hass!.connection, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeEntityRegistry(this.hass!.connection, (entries) => {\n        this._entities = entries;\n      }),\n    ];\n  }\n\n  public getCardSize(): number {\n    return 3;\n  }\n\n  public setConfig(config: AreaCardConfig): void {\n    if (!config.area) {\n      throw new Error(\"Area Required\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_config\") || !this._config) {\n      return true;\n    }\n\n    if (\n      changedProps.has(\"_devicesInArea\") ||\n      changedProps.has(\"_area\") ||\n      changedProps.has(\"_entities\")\n    ) {\n      return true;\n    }\n\n    if (!changedProps.has(\"hass\")) {\n      return false;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      !oldHass ||\n      oldHass.themes !== this.hass!.themes ||\n      oldHass.locale !== this.hass!.locale\n    ) {\n      return true;\n    }\n\n    if (\n      !this._devices ||\n      !this._devicesInArea(this._config.area, this._devices) ||\n      !this._entities\n    ) {\n      return false;\n    }\n\n    const { sensorEntities, entitiesToggle } = this._memberships(\n      this._config.area,\n      this._devicesInArea(this._config.area, this._devices),\n      this._entities,\n      this.hass.states\n    );\n\n    for (const stateObj of sensorEntities) {\n      if (oldHass!.states[stateObj.entity_id] !== stateObj) {\n        return true;\n      }\n    }\n\n    for (const stateObj of entitiesToggle) {\n      if (oldHass!.states[stateObj.entity_id] !== stateObj) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  protected render(): TemplateResult {\n    if (\n      !this._config ||\n      !this.hass ||\n      !this._areas ||\n      !this._devices ||\n      !this._entities\n    ) {\n      return html``;\n    }\n\n    const { sensorEntities, entitiesToggle } = this._memberships(\n      this._config.area,\n      this._devicesInArea(this._config.area, this._devices),\n      this._entities,\n      this.hass.states\n    );\n\n    const area = this._area(this._config.area, this._areas);\n\n    if (area === null) {\n      return html`\n        <hui-warning>\n          ${this.hass.localize(\"ui.card.area.area_not_found\")}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <ha-card\n        style=${styleMap({\n          \"background-image\": `url(${this.hass.hassUrl(area.picture)})`,\n        })}\n      >\n        <div class=\"container\">\n          <div class=\"sensors\">\n            ${sensorEntities.map(\n              (stateObj) => html`\n                <span\n                  .entity=${stateObj.entity_id}\n                  @click=${this._handleMoreInfo}\n                >\n                  <ha-state-icon .state=${stateObj}></ha-state-icon>\n                  ${computeDomain(stateObj.entity_id) === \"binary_sensor\"\n                    ? \"\"\n                    : html`\n                        ${computeStateDisplay(\n                          this.hass!.localize,\n                          stateObj,\n                          this.hass!.locale\n                        )}\n                      `}\n                </span>\n              `\n            )}\n          </div>\n          <div class=\"bottom\">\n            <div\n              class=\"name ${this._config.navigation_path ? \"navigate\" : \"\"}\"\n              @click=${this._handleNavigation}\n            >\n              ${area.name}\n            </div>\n            <div class=\"buttons\">\n              ${entitiesToggle.map(\n                (stateObj) => html`\n                  <ha-icon-button\n                    class=${classMap({\n                      off: stateObj.state === \"off\",\n                    })}\n                    .entity=${stateObj.entity_id}\n                    .actionHandler=${actionHandler({\n                      hasHold: true,\n                    })}\n                    @action=${this._handleAction}\n                  >\n                    <state-badge\n                      .hass=${this.hass}\n                      .stateObj=${stateObj}\n                      stateColor\n                    ></state-badge>\n                  </ha-icon-button>\n                `\n              )}\n            </div>\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as AreaCardConfig | undefined;\n\n    if (\n      (changedProps.has(\"hass\") &&\n        (!oldHass || oldHass.themes !== this.hass.themes)) ||\n      (changedProps.has(\"_config\") &&\n        (!oldConfig || oldConfig.theme !== this._config.theme))\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  private _handleMoreInfo(ev) {\n    const entity = (ev.currentTarget as any).entity;\n    fireEvent(this, \"hass-more-info\", { entityId: entity });\n  }\n\n  private _handleNavigation() {\n    if (this._config!.navigation_path) {\n      navigate(this._config!.navigation_path);\n    }\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    const entity = (ev.currentTarget as any).entity as string;\n    if (ev.detail.action === \"hold\") {\n      fireEvent(this, \"hass-more-info\", { entityId: entity });\n    } else if (ev.detail.action === \"tap\") {\n      toggleEntity(this.hass, entity);\n      forwardHaptic(\"light\");\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        overflow: hidden;\n        position: relative;\n        padding-bottom: 56.25%;\n        background-size: cover;\n      }\n\n      .container {\n        display: flex;\n        flex-direction: column;\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background-color: rgba(0, 0, 0, 0.4);\n      }\n\n      .sensors {\n        color: white;\n        font-size: 18px;\n        flex: 1;\n        padding: 16px;\n        --mdc-icon-size: 28px;\n        cursor: pointer;\n      }\n\n      .name {\n        color: white;\n        font-size: 24px;\n      }\n\n      .bottom {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 8px 8px 8px 16px;\n      }\n\n      .name.navigate {\n        cursor: pointer;\n      }\n\n      state-badge {\n        --ha-icon-display: inline;\n      }\n\n      ha-icon-button {\n        color: white;\n        background-color: var(--area-button-color, rgb(175, 175, 175, 0.5));\n        border-radius: 50%;\n        margin-left: 8px;\n        --mdc-icon-button-size: 44px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-area-card\": HuiAreaCard;\n  }\n}\n"],"names":[],"sourceRoot":""}