__all__ = [
    'ClosestToAverage',
]
import crowdkit.aggregation.base
import numpy
import pandas.core.frame
import pandas.core.series
import typing


class ClosestToAverage(crowdkit.aggregation.base.BaseEmbeddingsAggregator):
    """Closest to Average - chooses the output with the embedding closest to the average embedding
    Attributes:
        embeddings_and_outputs_ (DataFrame): Tasks' embeddings and outputs
            A pandas.DataFrame indexed by `task` with `embedding` and `output` columns.

        scores_ (DataFrame): Tasks' label scores
            A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
            is the score of `label` for `task`.
    """

    def fit(
        self,
        data: pandas.core.frame.DataFrame,
        aggregated_embeddings: pandas.core.series.Series = None,
        true_embeddings: pandas.core.series.Series = None
    ) -> 'ClosestToAverage':
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            aggregated_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
            true_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            ClosestToAverage: self
        """
        ...

    def fit_predict_scores(
        self,
        data: pandas.core.frame.DataFrame,
        aggregated_embeddings: pandas.core.series.Series = None
    ) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            aggregated_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            DataFrame: Tasks' label probability distributions
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the probability of `task`'s true label to be equal to `label`. Each
                probability is between 0 and 1, all task's probabilities should sum up to 1
        """
        ...

    def fit_predict(
        self,
        data: pandas.core.frame.DataFrame,
        aggregated_embeddings: pandas.core.series.Series = None
    ) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            aggregated_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            DataFrame: Tasks' embeddings and outputs
                A pandas.DataFrame indexed by `task` with `embedding` and `output` columns.
        """
        ...

    def __init__(self, distance: typing.Callable[[numpy.ndarray, numpy.ndarray], float]) -> None:
        """Method generated by attrs for class ClosestToAverage.
        """
        ...

    embeddings_and_outputs_: pandas.core.frame.DataFrame
    scores_: pandas.core.frame.DataFrame
    distance: typing.Callable[[numpy.ndarray, numpy.ndarray], float]
