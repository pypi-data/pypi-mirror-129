__all__ = [
    'SegmentationMajorityVote',
]
import crowdkit.aggregation.base
import pandas.core.frame
import pandas.core.series
import typing


class SegmentationMajorityVote(crowdkit.aggregation.base.BaseImageSegmentationAggregator):
    """Majority Vote - chooses a pixel if more than half of performers voted

    Doris Jung-Lin Lee. 2018.
    Quality Evaluation Methods for Crowdsourced Image Segmentation
    http://ilpubs.stanford.edu:8090/1161/1/main.pdf
    Attributes:
        segmentations_ (Series): Tasks' segmentations
            A pandas.Series indexed by `task` such that `labels.loc[task]`
            is the tasks's aggregated segmentation.

        on_missing_skill (str): How to handle assignments done by workers with unknown skill
            Possible values:
                    * "error" — raise an exception if there is at least one assignment done by user with unknown skill;
                    * "ignore" — drop assignments with unknown skill values during prediction. Raise an exception if there is no 
                    assignments with known skill for any task;
                    * value — default value will be used if skill is missing.
    """

    def fit(
        self,
        data: pandas.core.frame.DataFrame,
        skills: pandas.core.series.Series = None
    ) -> 'SegmentationMajorityVote':
        """Args:
            data (DataFrame): Performers' segmentations
                A pandas.DataFrame containing `performer`, `task` and `segmentation` columns'.

            skills (Series): Performers' skills
                A pandas.Series index by performers and holding corresponding performer's skill
        Returns:
            SegmentationMajorityVote: self
        """
        ...

    def fit_predict(
        self,
        data: pandas.core.frame.DataFrame,
        skills: pandas.core.series.Series = None
    ) -> pandas.core.series.Series:
        """Args:
            data (DataFrame): Performers' segmentations
                A pandas.DataFrame containing `performer`, `task` and `segmentation` columns'.

            skills (Series): Performers' skills
                A pandas.Series index by performers and holding corresponding performer's skill
        Returns:
            Series: Tasks' segmentations
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's aggregated segmentation.
        """
        ...

    def __init__(
        self,
        on_missing_skill: str = 'error',
        default_skill: typing.Optional[float] = None
    ) -> None:
        """Method generated by attrs for class SegmentationMajorityVote.
        """
        ...

    segmentations_: pandas.core.series.Series
    on_missing_skill: str
    default_skill: typing.Optional[float]
