__all__ = [
    'DawidSkene',
]
import crowdkit.aggregation.base
import pandas.core.frame
import pandas.core.series
import typing


class DawidSkene(crowdkit.aggregation.base.BaseClassificationAggregator):
    """Dawid-Skene aggregation model
    A. Philip Dawid and Allan M. Skene. 1979.
    Maximum Likelihood Estimation of Observer Error-Rates Using the EM Algorithm.
    Journal of the Royal Statistical Society. Series C (Applied Statistics), Vol. 28, 1 (1979), 20â€“28.

    https://doi.org/10.2307/2346806
    Attributes:
        labels_ (typing.Optional[pandas.core.series.Series]): Tasks' labels
            A pandas.Series indexed by `task` such that `labels.loc[task]`
            is the tasks's most likely true label.

        probas_ (typing.Optional[pandas.core.frame.DataFrame]): Tasks' label probability distributions
            A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
            is the probability of `task`'s true label to be equal to `label`. Each
            probability is between 0 and 1, all task's probabilities should sum up to 1

        priors_ (typing.Optional[pandas.core.series.Series]): A prior label distribution
            A pandas.Series indexed by labels and holding corresponding label's
            probability of occurrence. Each probability is between 0 and 1,
            all probabilities should sum up to 1

        errors_ (typing.Optional[pandas.core.frame.DataFrame]): Performers' error matrices
            A pandas.DataFrame indexed by `performer` and `label` with a column for every
            label_id found in `data` such that `result.loc[performer, observed_label, true_label]`
            is the probability of `performer` producing an `observed_label` given that a task's
            true label is `true_label`
    """

    def fit(self, data: pandas.core.frame.DataFrame) -> 'DawidSkene':
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            DawidSkene: self
        """
        ...

    def fit_predict_proba(self, data: pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            DataFrame: Tasks' label probability distributions
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the probability of `task`'s true label to be equal to `label`. Each
                probability is between 0 and 1, all task's probabilities should sum up to 1
        """
        ...

    def fit_predict(self, data: pandas.core.frame.DataFrame) -> pandas.core.series.Series:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            Series: Tasks' labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's most likely true label.
        """
        ...

    def __init__(self, n_iter: int) -> None:
        """Method generated by attrs for class DawidSkene.
        """
        ...

    labels_: typing.Optional[pandas.core.series.Series]
    n_iter: int
    probas_: typing.Optional[pandas.core.frame.DataFrame]
    priors_: typing.Optional[pandas.core.series.Series]
    errors_: typing.Optional[pandas.core.frame.DataFrame]
