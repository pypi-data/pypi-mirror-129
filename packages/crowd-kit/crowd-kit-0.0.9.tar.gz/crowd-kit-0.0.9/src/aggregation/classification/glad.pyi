__all__ = [
    'GLAD',
]
import crowdkit.aggregation.base
import pandas.core.frame
import pandas.core.series
import typing


class GLAD(crowdkit.aggregation.base.BaseClassificationAggregator):
    """Generative model of Labels, Abilities, and Difficulties
    J. Whitehill, P. Ruvolo, T. Wu, J. Bergsma, and J. Movellan
    Whose Vote Should Count More: Optimal Integration of Labels from Labelers of Unknown Expertise.
    Proceedings of the 22nd International Conference on Neural Information Processing Systems, 2009

    https://proceedings.neurips.cc/paper/2009/file/f899139df5e1059396431415e770c6dd-Paper.pdf
    Attributes:
        labels_ (typing.Optional[pandas.core.series.Series]): Tasks' labels
            A pandas.Series indexed by `task` such that `labels.loc[task]`
            is the tasks's most likely true label.

        probas_ (typing.Optional[pandas.core.frame.DataFrame]): Tasks' label probability distributions
            A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
            is the probability of `task`'s true label to be equal to `label`. Each
            probability is between 0 and 1, all task's probabilities should sum up to 1

        alphas_ (Series): Performers' alpha parameters
            A pandas.Series indexed by `performer` that contains estimated alpha parameters.

        betas_ (Series): Tasks' beta parameters
            A pandas.Series indexed by `task` that contains estimated beta parameters.
    """

    def fit(self, data: pandas.core.frame.DataFrame) -> 'GLAD':
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            GLAD: self
        """
        ...

    def fit_predict_proba(self, data: pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            DataFrame: Tasks' label probability distributions
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the probability of `task`'s true label to be equal to `label`. Each
                probability is between 0 and 1, all task's probabilities should sum up to 1
        """
        ...

    def fit_predict(self, data: pandas.core.frame.DataFrame) -> pandas.core.series.Series:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            Series: Tasks' labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's most likely true label.
        """
        ...

    def __init__(
        self,
        max_iter: int = 100,
        eps: float = ...,
        silent: bool = True,
        labels_priors: typing.Optional[pandas.core.series.Series] = None,
        alphas_priors_mean: typing.Optional[pandas.core.series.Series] = None,
        betas_priors_mean: typing.Optional[pandas.core.series.Series] = None,
        m_step_max_iter: int = 25,
        m_step_tol: float = ...
    ) -> None:
        """Method generated by attrs for class GLAD.
        """
        ...

    labels_: typing.Optional[pandas.core.series.Series]
    max_iter: int
    eps: float
    silent: bool
    labels_priors: typing.Optional[pandas.core.series.Series]
    alphas_priors_mean: typing.Optional[pandas.core.series.Series]
    betas_priors_mean: typing.Optional[pandas.core.series.Series]
    m_step_max_iter: int
    m_step_tol: float
    probas_: typing.Optional[pandas.core.frame.DataFrame]
    alphas_: pandas.core.series.Series
    betas_: pandas.core.series.Series
