__all__ = [
    'BradleyTerry',
]
import crowdkit.aggregation.base
import pandas.core.frame
import pandas.core.series


class BradleyTerry(crowdkit.aggregation.base.BasePairwiseAggregator):
    """Bradley-Terry, the classic algorithm for aggregating pairwise comparisons.

    David R. Hunter. 2004.
    MM algorithms for generalized Bradley-Terry models
    Ann. Statist., Vol. 32, 1 (2004): 384–406.

    Bradley, R. A. and Terry, M. E. 1952.
    Rank analysis of incomplete block designs. I. The method of paired comparisons.
    Biometrika, Vol. 39 (1952): 324–345.
    Attributes:
        scores_ (Series): 'Labels' scores
            A pandas.Series index by labels and holding corresponding label's scores
    """

    def fit(self, data: pandas.core.frame.DataFrame) -> 'BradleyTerry':
        """Args:
            data (DataFrame): Performers' pairwise comparison results
                A pandas.DataFrame containing `performer`, `left`, `right`, and `label` columns'.
                For each row `label` must be equal to either `left` column or `right` column.

        Returns:
            BradleyTerry: self
        """
        ...

    def fit_predict(self, data: pandas.core.frame.DataFrame) -> pandas.core.series.Series:
        """Args:
            data (DataFrame): Performers' pairwise comparison results
                A pandas.DataFrame containing `performer`, `left`, `right`, and `label` columns'.
                For each row `label` must be equal to either `left` column or `right` column.

        Returns:
            Series: 'Labels' scores
                A pandas.Series index by labels and holding corresponding label's scores
        """
        ...

    def __init__(self, n_iter: int) -> None:
        """Method generated by attrs for class BradleyTerry.
        """
        ...

    scores_: pandas.core.series.Series
    n_iter: int
