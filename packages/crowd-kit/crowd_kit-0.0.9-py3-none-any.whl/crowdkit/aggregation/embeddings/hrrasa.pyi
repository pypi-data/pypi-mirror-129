__all__ = [
    'glue_similarity',
    'HRRASA',
]
import crowdkit.aggregation.base
import pandas.core.frame
import pandas.core.series
import typing


def glue_similarity(hyp, ref): ...


class HRRASA(crowdkit.aggregation.base.BaseClassificationAggregator):
    """Hybrid Reliability and Representation Aware Sequence Aggregation
    Jiyi Li. 2020.
    Crowdsourced Text Sequence Aggregation based on Hybrid Reliability and Representation.
    Proceedings of the 43rd International ACM SIGIR Conference on Research and Development
    in Information Retrieval (SIGIR ’20), July 25–30, 2020, Virtual Event, China. ACM, New York, NY, USA,

    https://doi.org/10.1145/3397271.3401239
    """

    def fit(
        self,
        data: pandas.core.frame.DataFrame,
        true_embeddings: pandas.core.series.Series = None
    ) -> 'HRRASA':
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            true_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            HRRASA: self
        """
        ...

    def fit_predict_scores(
        self,
        data: pandas.core.frame.DataFrame,
        true_embeddings: pandas.core.series.Series = None
    ) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            true_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            DataFrame: Tasks' label scores
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the score of `label` for `task`.
        """
        ...

    def fit_predict(
        self,
        data: pandas.core.frame.DataFrame,
        true_embeddings: pandas.core.series.Series = None
    ) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' outputs with their embeddings
                A pandas.DataFrame containing `task`, `performer`, `output` and `embedding` columns.
            true_embeddings (Series): Tasks' embeddings
                A pandas.Series indexed by `task` and holding corresponding embeddings.
        Returns:
            DataFrame: Tasks' embeddings and outputs
                A pandas.DataFrame indexed by `task` with `embedding` and `output` columns.
        """
        ...

    def __init__(
        self,
        n_iter: int = 100,
        lambda_emb: float = ...,
        lambda_out: float = ...,
        alpha: float = ...,
        calculate_ranks: bool = False,
        output_similarity=...
    ) -> None:
        """Method generated by attrs for class HRRASA.
        """
        ...

    labels_: typing.Optional[pandas.core.series.Series]
    n_iter: int
    lambda_emb: float
    lambda_out: float
    alpha: float
    calculate_ranks: bool
