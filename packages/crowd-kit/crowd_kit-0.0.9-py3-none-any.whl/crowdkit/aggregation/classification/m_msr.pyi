__all__ = [
    'MMSR',
]
import crowdkit.aggregation.base
import numpy
import pandas.core.frame
import pandas.core.series
import typing


class MMSR(crowdkit.aggregation.base.BaseClassificationAggregator):
    """Matrix Mean-Subsequence-Reduced Algorithm
    Qianqian Ma and Alex Olshevsky. 2020.
    Adversarial Crowdsourcing Through Robust Rank-One Matrix Completion
    34th Conference on Neural Information Processing Systems (NeurIPS 2020)
    https://arxiv.org/abs/2010.12181
    Attributes:
        labels_ (typing.Optional[pandas.core.series.Series]): Tasks' labels
            A pandas.Series indexed by `task` such that `labels.loc[task]`
            is the tasks's most likely true label.

        skills_ (typing.Optional[pandas.core.series.Series]): Performers' skills
            A pandas.Series index by performers and holding corresponding performer's skill
        scores_ (typing.Optional[pandas.core.frame.DataFrame]): Tasks' label scores
            A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
            is the score of `label` for `task`.
    """

    def fit(self, data: pandas.core.frame.DataFrame) -> 'MMSR':
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            MMSR: self
        """
        ...

    def predict(self, data: pandas.core.frame.DataFrame) -> pandas.core.series.Series:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            Series: Tasks' labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's most likely true label.
        """
        ...

    def predict_score(self, data: pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            DataFrame: Tasks' label scores
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the score of `label` for `task`.
        """
        ...

    def fit_predict(self, data: pandas.core.frame.DataFrame) -> pandas.core.series.Series:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            Series: Tasks' labels
                A pandas.Series indexed by `task` such that `labels.loc[task]`
                is the tasks's most likely true label.
        """
        ...

    def fit_predict_score(self, data: pandas.core.frame.DataFrame) -> pandas.core.frame.DataFrame:
        """Args:
            data (DataFrame): Performers' labeling results
                A pandas.DataFrame containing `task`, `performer` and `label` columns.
        Returns:
            DataFrame: Tasks' label scores
                A pandas.DataFrame indexed by `task` such that `result.loc[task, label]`
                is the score of `label` for `task`.
        """
        ...

    def __init__(
        self,
        n_iter: int = 10000,
        eps: float = ...,
        random_state: typing.Optional[int] = 0,
        observation_matrix: numpy.ndarray = ...,
        covariation_matrix: numpy.ndarray = ...,
        n_common_tasks: numpy.ndarray = ...,
        n_performers: int = 0,
        n_tasks: int = 0,
        n_labels: int = 0,
        labels_mapping: dict = ...,
        performers_mapping: dict = ...,
        tasks_mapping: dict = ...
    ) -> None:
        """Method generated by attrs for class MMSR.
        """
        ...

    labels_: typing.Optional[pandas.core.series.Series]
    n_iter: int
    eps: float
    random_state: typing.Optional[int]
    _observation_matrix: numpy.ndarray
    _covariation_matrix: numpy.ndarray
    _n_common_tasks: numpy.ndarray
    _n_performers: int
    _n_tasks: int
    _n_labels: int
    _labels_mapping: dict
    _performers_mapping: dict
    _tasks_mapping: dict
    skills_: typing.Optional[pandas.core.series.Series]
    scores_: typing.Optional[pandas.core.frame.DataFrame]
