# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Template1Defaults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color': 'str',
        'font_size': 'float',
        'typeface': 'str'
    }

    attribute_map = {
        'color': 'color',
        'font_size': 'fontSize',
        'typeface': 'typeface'
    }

    def __init__(self, color=None, font_size=None, typeface=None):  # noqa: E501
        """Template1Defaults - a model defined in OpenAPI"""  # noqa: E501

        self._color = None
        self._font_size = None
        self._typeface = None
        self.discriminator = None

        self.color = color
        if font_size is not None:
            self.font_size = font_size
        if typeface is not None:
            self.typeface = typeface

    @property
    def color(self):
        """Gets the color of this Template1Defaults.  # noqa: E501


        :return: The color of this Template1Defaults.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Template1Defaults.


        :param color: The color of this Template1Defaults.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def font_size(self):
        """Gets the font_size of this Template1Defaults.  # noqa: E501


        :return: The font_size of this Template1Defaults.  # noqa: E501
        :rtype: float
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this Template1Defaults.


        :param font_size: The font_size of this Template1Defaults.  # noqa: E501
        :type: float
        """

        self._font_size = font_size

    @property
    def typeface(self):
        """Gets the typeface of this Template1Defaults.  # noqa: E501


        :return: The typeface of this Template1Defaults.  # noqa: E501
        :rtype: str
        """
        return self._typeface

    @typeface.setter
    def typeface(self, typeface):
        """Sets the typeface of this Template1Defaults.


        :param typeface: The typeface of this Template1Defaults.  # noqa: E501
        :type: str
        """

        self._typeface = typeface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template1Defaults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
