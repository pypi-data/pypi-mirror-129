# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ledcd
else:
    import _ledcd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (
        self.__class__.__module__,
        self.__class__.__name__,
        strthis,
    )


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)

    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)

    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""

    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())

    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""

    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import signal, sys


class CubeDrawer(object):
    thisown = property(
        lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag"
    )
    delta_time = property(_ledcd.CubeDrawer_delta_time_get)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    __repr__ = _swig_repr

    @staticmethod
    def get_obj():
        obj = _ledcd.CubeDrawer_get_obj()
        signal.signal(signal.SIGINT, obj._clean_obj)
        return obj

    def _clean_obj(self, *_):
        _ledcd.CubeDrawer__clean_obj(self)
        sys.exit(0)

    def get_virt_amount(self):
        return _ledcd.CubeDrawer_get_virt_amount(self)

    def set_wait_cube(self, v):
        return _ledcd.CubeDrawer_set_wait_cube(self, v)

    def get_cur_color(self):
        return _ledcd.CubeDrawer_get_cur_color(self)

    def push_matrix(self):
        return _ledcd.CubeDrawer_push_matrix(self)

    def pop_matrix(self):
        return _ledcd.CubeDrawer_pop_matrix(self)

    def pop_all_matrix(self):
        return _ledcd.CubeDrawer_pop_all_matrix(self)

    def translate(self, *args):
        return _ledcd.CubeDrawer_translate(self, *args)

    def rotate(self, *args):
        return _ledcd.CubeDrawer_rotate(self, *args)

    def scale(self, *args):
        return _ledcd.CubeDrawer_scale(self, *args)

    def clear(self, *args):
        return _ledcd.CubeDrawer_clear(self, *args)

    def show(self):
        return _ledcd.CubeDrawer_show(self)

    def set_fps(self, fps):
        return _ledcd.CubeDrawer_set_fps(self, fps)

    def set_brigthness(self, *args):
        return _ledcd.CubeDrawer_set_brigthness(self, *args)

    def set_color(self, *args):
        return _ledcd.CubeDrawer_set_color(self, *args)

    def set_immediate(self, v):
        return _ledcd.CubeDrawer_set_immediate(self, v)

    def point(self, *args):
        return _ledcd.CubeDrawer_point(self, *args)

    def line(self, *args):
        return _ledcd.CubeDrawer_line(self, *args)

    def circle(self, *args):
        return _ledcd.CubeDrawer_circle(self, *args)

    def filled_circle(self, *args):
        return _ledcd.CubeDrawer_filled_circle(self, *args)

    def ellipse(self, *args):
        return _ledcd.CubeDrawer_ellipse(self, *args)

    def filled_ellipse(self, *args):
        return _ledcd.CubeDrawer_filled_ellipse(self, *args)

    def sphere(self, *args):
        return _ledcd.CubeDrawer_sphere(self, *args)

    def filled_sphere(self, *args):
        return _ledcd.CubeDrawer_filled_sphere(self, *args)

    def ellipsoid(self, *args):
        return _ledcd.CubeDrawer_ellipsoid(self, *args)

    def filled_ellipsoid(self, *args):
        return _ledcd.CubeDrawer_filled_ellipsoid(self, *args)

    def poly(self, *args):
        return _ledcd.CubeDrawer_poly(self, *args)

    def tetr(self, *args):
        return _ledcd.CubeDrawer_tetr(self, *args)


# Register CubeDrawer in _ledcd:
_ledcd.CubeDrawer_swigregister(CubeDrawer)
