"""Autogenerated file: DO NOT EDIT!"""
import typing  # noqa: F401
from dazzler.system import Component, Aspect, UNDEFINED  # noqa: F401


class Tspan(Component):
    """

    """
    string = Aspect()
    children = Aspect(children=True)
    color = Aspect()
    height = Aspect()
    id = Aspect()
    lang = Aspect()
    max = Aspect()
    media = Aspect()
    method = Aspect()
    min = Aspect()
    name = Aspect()
    style = Aspect(docstring="Style object for the top level wrapper of the component.")  # noqa: E501
    target = Aspect()
    type = Aspect()
    width = Aspect()
    role = Aspect()
    tabIndex = Aspect()
    crossOrigin = Aspect(docstring="(Possible values: '', 'anonymous', 'use-credentials')")  # noqa: E501
    accentHeight = Aspect()
    accumulate = Aspect(docstring="(Possible values: 'none', 'sum')")
    additive = Aspect(docstring="(Possible values: 'sum', 'replace')")
    alignmentBaseline = Aspect(docstring="(Possible values: 'alphabetic', 'hanging', 'ideographic', 'mathematical', 'auto', 'baseline', 'before-edge', 'text-before-edge', 'middle', 'central', 'after-edge', 'text-after-edge', 'inherit')")  # noqa: E501
    allowReorder = Aspect(docstring="(Possible values: 'no', 'yes')")
    alphabetic = Aspect()
    amplitude = Aspect()
    arabicForm = Aspect(docstring="(Possible values: 'initial', 'medial', 'terminal', 'isolated')")  # noqa: E501
    ascent = Aspect()
    attributeName = Aspect()
    attributeType = Aspect()
    autoReverse = Aspect()
    azimuth = Aspect()
    baseFrequency = Aspect()
    baselineShift = Aspect()
    baseProfile = Aspect()
    bbox = Aspect()
    begin = Aspect()
    bias = Aspect()
    by = Aspect()
    calcMode = Aspect()
    capHeight = Aspect()
    clip = Aspect()
    clipPath = Aspect()
    clipPathUnits = Aspect()
    clipRule = Aspect()
    colorInterpolation = Aspect()
    colorInterpolationFilters = Aspect(docstring="(Possible values: 'auto', 'inherit', 'sRGB', 'linearRGB')")  # noqa: E501
    colorProfile = Aspect()
    colorRendering = Aspect()
    contentScriptType = Aspect()
    contentStyleType = Aspect()
    cursor = Aspect()
    cx = Aspect()
    cy = Aspect()
    d = Aspect()
    decelerate = Aspect()
    descent = Aspect()
    diffuseConstant = Aspect()
    direction = Aspect()
    display = Aspect()
    divisor = Aspect()
    dominantBaseline = Aspect()
    dur = Aspect()
    dx = Aspect()
    dy = Aspect()
    edgeMode = Aspect()
    elevation = Aspect()
    enableBackground = Aspect()
    end = Aspect()
    exponent = Aspect()
    externalResourcesRequired = Aspect()
    fill = Aspect()
    fillOpacity = Aspect()
    fillRule = Aspect(docstring="(Possible values: 'inherit', 'nonzero', 'evenodd')")  # noqa: E501
    filter = Aspect()
    filterRes = Aspect()
    filterUnits = Aspect()
    floodColor = Aspect()
    floodOpacity = Aspect()
    focusable = Aspect()
    fontFamily = Aspect()
    fontSize = Aspect()
    fontSizeAdjust = Aspect()
    fontStretch = Aspect()
    fontStyle = Aspect()
    fontVariant = Aspect()
    fontWeight = Aspect()
    format = Aspect()
    fx = Aspect()
    fy = Aspect()
    g1 = Aspect()
    g2 = Aspect()
    glyphName = Aspect()
    glyphOrientationHorizontal = Aspect()
    glyphOrientationVertical = Aspect()
    glyphRef = Aspect()
    gradientTransform = Aspect()
    gradientUnits = Aspect()
    hanging = Aspect()
    horizAdvX = Aspect()
    horizOriginX = Aspect()
    href = Aspect()
    ideographic = Aspect()
    imageRendering = Aspect()
    in2 = Aspect()
    intercept = Aspect()
    k1 = Aspect()
    k2 = Aspect()
    k3 = Aspect()
    k4 = Aspect()
    k = Aspect()
    kernelMatrix = Aspect()
    kernelUnitLength = Aspect()
    kerning = Aspect()
    keyPoints = Aspect()
    keySplines = Aspect()
    keyTimes = Aspect()
    lengthAdjust = Aspect()
    letterSpacing = Aspect()
    lightingColor = Aspect()
    limitingConeAngle = Aspect()
    local = Aspect()
    markerEnd = Aspect()
    markerHeight = Aspect()
    markerMid = Aspect()
    markerStart = Aspect()
    markerUnits = Aspect()
    markerWidth = Aspect()
    mask = Aspect()
    maskContentUnits = Aspect()
    maskUnits = Aspect()
    mathematical = Aspect()
    mode = Aspect()
    numOctaves = Aspect()
    offset = Aspect()
    opacity = Aspect()
    operator = Aspect()
    order = Aspect()
    orient = Aspect()
    orientation = Aspect()
    origin = Aspect()
    overflow = Aspect()
    overlinePosition = Aspect()
    overlineThickness = Aspect()
    paintOrder = Aspect()
    panose1 = Aspect()
    path = Aspect()
    pathLength = Aspect()
    patternContentUnits = Aspect()
    patternTransform = Aspect()
    patternUnits = Aspect()
    pointerEvents = Aspect()
    points = Aspect()
    pointsAtX = Aspect()
    pointsAtY = Aspect()
    pointsAtZ = Aspect()
    preserveAlpha = Aspect()
    preserveAspectRatio = Aspect()
    primitiveUnits = Aspect()
    r = Aspect()
    radius = Aspect()
    refX = Aspect()
    refY = Aspect()
    renderingIntent = Aspect()
    repeatCount = Aspect()
    repeatDur = Aspect()
    requiredExtensions = Aspect()
    requiredFeatures = Aspect()
    restart = Aspect()
    result = Aspect()
    rotate = Aspect()
    rx = Aspect()
    ry = Aspect()
    scale = Aspect()
    seed = Aspect()
    shapeRendering = Aspect()
    slope = Aspect()
    spacing = Aspect()
    specularConstant = Aspect()
    specularExponent = Aspect()
    speed = Aspect()
    spreadMethod = Aspect()
    startOffset = Aspect()
    stdDeviation = Aspect()
    stemh = Aspect()
    stemv = Aspect()
    stitchTiles = Aspect()
    stopColor = Aspect()
    stopOpacity = Aspect()
    strikethroughPosition = Aspect()
    strikethroughThickness = Aspect()
    stroke = Aspect()
    strokeDasharray = Aspect()
    strokeDashoffset = Aspect()
    strokeLinecap = Aspect(docstring="(Possible values: 'inherit', 'butt', 'round', 'square')")  # noqa: E501
    strokeLinejoin = Aspect(docstring="(Possible values: 'inherit', 'round', 'miter', 'bevel')")  # noqa: E501
    strokeMiterlimit = Aspect()
    strokeOpacity = Aspect()
    strokeWidth = Aspect()
    surfaceScale = Aspect()
    systemLanguage = Aspect()
    tableValues = Aspect()
    targetX = Aspect()
    targetY = Aspect()
    textAnchor = Aspect()
    textDecoration = Aspect()
    textLength = Aspect()
    textRendering = Aspect()
    to = Aspect()
    transform = Aspect()
    u1 = Aspect()
    u2 = Aspect()
    underlinePosition = Aspect()
    underlineThickness = Aspect()
    unicode = Aspect()
    unicodeBidi = Aspect()
    unicodeRange = Aspect()
    unitsPerEm = Aspect()
    vAlphabetic = Aspect()
    values = Aspect()
    vectorEffect = Aspect()
    version = Aspect()
    vertAdvY = Aspect()
    vertOriginX = Aspect()
    vertOriginY = Aspect()
    vHanging = Aspect()
    vIdeographic = Aspect()
    viewBox = Aspect()
    viewTarget = Aspect()
    visibility = Aspect()
    vMathematical = Aspect()
    widths = Aspect()
    wordSpacing = Aspect()
    writingMode = Aspect()
    x1 = Aspect()
    x2 = Aspect()
    x = Aspect()
    xChannelSelector = Aspect()
    xHeight = Aspect()
    xlinkActuate = Aspect()
    xlinkArcrole = Aspect()
    xlinkHref = Aspect()
    xlinkRole = Aspect()
    xlinkShow = Aspect()
    xlinkTitle = Aspect()
    xlinkType = Aspect()
    xmlBase = Aspect()
    xmlLang = Aspect()
    xmlns = Aspect()
    xmlnsXlink = Aspect()
    xmlSpace = Aspect()
    y1 = Aspect()
    y2 = Aspect()
    y = Aspect()
    yChannelSelector = Aspect()
    z = Aspect()
    zoomAndPan = Aspect()
    handle_clicks = Aspect()
    clicks = Aspect()
    click_event = Aspect()
    handle_hover = Aspect()
    is_hovered = Aspect()
    handle_load = Aspect()
    is_loaded = Aspect()
    handle_focus = Aspect()
    is_focused = Aspect()
    class_name = Aspect(docstring="Class name automatically added by dazzler api with a prefix for the component library.ie: core component Container become ``dazzler-core-container``.When added on the component, the class names will be concatenated.")  # noqa: E501

    def __init__(
            self,
            string: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            children: typing.Optional[typing.Union[str, int, float, Component, typing.List[typing.Union[str, int, float, Component]]]] = UNDEFINED,  # noqa: E501
            color: typing.Optional[str] = UNDEFINED,
            height: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            id: typing.Optional[str] = UNDEFINED,
            lang: typing.Optional[str] = UNDEFINED,
            max: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            media: typing.Optional[str] = UNDEFINED,
            method: typing.Optional[str] = UNDEFINED,
            min: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            name: typing.Optional[str] = UNDEFINED,
            style: typing.Optional[typing.Union[typing.Dict]] = UNDEFINED,
            target: typing.Optional[str] = UNDEFINED,
            type: typing.Optional[str] = UNDEFINED,
            width: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            role: typing.Optional[typing.Any] = UNDEFINED,
            tabIndex: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            crossOrigin: typing.Optional[typing.Any] = UNDEFINED,
            accentHeight: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            accumulate: typing.Optional[typing.Any] = UNDEFINED,
            additive: typing.Optional[typing.Any] = UNDEFINED,
            alignmentBaseline: typing.Optional[typing.Any] = UNDEFINED,
            allowReorder: typing.Optional[typing.Any] = UNDEFINED,
            alphabetic: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            amplitude: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            arabicForm: typing.Optional[typing.Any] = UNDEFINED,
            ascent: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            attributeName: typing.Optional[str] = UNDEFINED,
            attributeType: typing.Optional[str] = UNDEFINED,
            autoReverse: typing.Optional[typing.Any] = UNDEFINED,
            azimuth: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            baseFrequency: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            baselineShift: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            baseProfile: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            bbox: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            begin: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            bias: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            by: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            calcMode: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            capHeight: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            clip: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            clipPath: typing.Optional[str] = UNDEFINED,
            clipPathUnits: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            clipRule: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            colorInterpolation: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            colorInterpolationFilters: typing.Optional[typing.Any] = UNDEFINED,  # noqa: E501
            colorProfile: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            colorRendering: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            contentScriptType: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            contentStyleType: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            cursor: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            cx: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            cy: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            d: typing.Optional[str] = UNDEFINED,
            decelerate: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            descent: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            diffuseConstant: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            direction: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            display: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            divisor: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            dominantBaseline: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            dur: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            dx: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            dy: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            edgeMode: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            elevation: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            enableBackground: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            end: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            exponent: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            externalResourcesRequired: typing.Optional[typing.Any] = UNDEFINED,  # noqa: E501
            fill: typing.Optional[str] = UNDEFINED,
            fillOpacity: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            fillRule: typing.Optional[typing.Any] = UNDEFINED,
            filter: typing.Optional[str] = UNDEFINED,
            filterRes: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            filterUnits: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            floodColor: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            floodOpacity: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            focusable: typing.Optional[typing.Any] = UNDEFINED,
            fontFamily: typing.Optional[str] = UNDEFINED,
            fontSize: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            fontSizeAdjust: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            fontStretch: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            fontStyle: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            fontVariant: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            fontWeight: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            format: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            fx: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            fy: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            g1: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            g2: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            glyphName: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            glyphOrientationHorizontal: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            glyphOrientationVertical: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            glyphRef: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            gradientTransform: typing.Optional[str] = UNDEFINED,
            gradientUnits: typing.Optional[str] = UNDEFINED,
            hanging: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            horizAdvX: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            horizOriginX: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            href: typing.Optional[str] = UNDEFINED,
            ideographic: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            imageRendering: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            in2: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            intercept: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            k1: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            k2: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            k3: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            k4: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            k: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            kernelMatrix: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            kernelUnitLength: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            kerning: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            keyPoints: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            keySplines: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            keyTimes: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            lengthAdjust: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            letterSpacing: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            lightingColor: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            limitingConeAngle: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            local: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            markerEnd: typing.Optional[str] = UNDEFINED,
            markerHeight: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            markerMid: typing.Optional[str] = UNDEFINED,
            markerStart: typing.Optional[str] = UNDEFINED,
            markerUnits: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            markerWidth: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            mask: typing.Optional[str] = UNDEFINED,
            maskContentUnits: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            maskUnits: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            mathematical: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            mode: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            numOctaves: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            offset: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            opacity: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            operator: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            order: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            orient: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            orientation: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            origin: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            overflow: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            overlinePosition: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            overlineThickness: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            paintOrder: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            panose1: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            path: typing.Optional[str] = UNDEFINED,
            pathLength: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            patternContentUnits: typing.Optional[str] = UNDEFINED,
            patternTransform: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            patternUnits: typing.Optional[str] = UNDEFINED,
            pointerEvents: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            points: typing.Optional[str] = UNDEFINED,
            pointsAtX: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            pointsAtY: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            pointsAtZ: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            preserveAlpha: typing.Optional[typing.Any] = UNDEFINED,
            preserveAspectRatio: typing.Optional[str] = UNDEFINED,
            primitiveUnits: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            r: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            radius: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            refX: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            refY: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            renderingIntent: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            repeatCount: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            repeatDur: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            requiredExtensions: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            requiredFeatures: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            restart: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            result: typing.Optional[str] = UNDEFINED,
            rotate: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            rx: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            ry: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            scale: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            seed: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            shapeRendering: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            slope: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            spacing: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            specularConstant: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            specularExponent: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            speed: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            spreadMethod: typing.Optional[str] = UNDEFINED,
            startOffset: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            stdDeviation: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            stemh: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            stemv: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            stitchTiles: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            stopColor: typing.Optional[str] = UNDEFINED,
            stopOpacity: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            strikethroughPosition: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            strikethroughThickness: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            stroke: typing.Optional[str] = UNDEFINED,
            strokeDasharray: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            strokeDashoffset: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            strokeLinecap: typing.Optional[typing.Any] = UNDEFINED,
            strokeLinejoin: typing.Optional[typing.Any] = UNDEFINED,
            strokeMiterlimit: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            strokeOpacity: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            strokeWidth: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            surfaceScale: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            systemLanguage: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            tableValues: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            targetX: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            targetY: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            textAnchor: typing.Optional[str] = UNDEFINED,
            textDecoration: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            textLength: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            textRendering: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            to: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            transform: typing.Optional[str] = UNDEFINED,
            u1: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            u2: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            underlinePosition: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            underlineThickness: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            unicode: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            unicodeBidi: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            unicodeRange: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            unitsPerEm: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            vAlphabetic: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            values: typing.Optional[str] = UNDEFINED,
            vectorEffect: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            version: typing.Optional[str] = UNDEFINED,
            vertAdvY: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            vertOriginX: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            vertOriginY: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            vHanging: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            vIdeographic: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            viewBox: typing.Optional[str] = UNDEFINED,
            viewTarget: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            visibility: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            vMathematical: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            widths: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            wordSpacing: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            writingMode: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            x1: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            x2: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            x: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            xChannelSelector: typing.Optional[str] = UNDEFINED,
            xHeight: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            xlinkActuate: typing.Optional[str] = UNDEFINED,
            xlinkArcrole: typing.Optional[str] = UNDEFINED,
            xlinkHref: typing.Optional[str] = UNDEFINED,
            xlinkRole: typing.Optional[str] = UNDEFINED,
            xlinkShow: typing.Optional[str] = UNDEFINED,
            xlinkTitle: typing.Optional[str] = UNDEFINED,
            xlinkType: typing.Optional[str] = UNDEFINED,
            xmlBase: typing.Optional[str] = UNDEFINED,
            xmlLang: typing.Optional[str] = UNDEFINED,
            xmlns: typing.Optional[str] = UNDEFINED,
            xmlnsXlink: typing.Optional[str] = UNDEFINED,
            xmlSpace: typing.Optional[str] = UNDEFINED,
            y1: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            y2: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            y: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            yChannelSelector: typing.Optional[str] = UNDEFINED,
            z: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            zoomAndPan: typing.Optional[str] = UNDEFINED,
            handle_clicks: typing.Optional[bool] = UNDEFINED,
            clicks: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            click_event: typing.Optional[typing.Any] = UNDEFINED,
            handle_hover: typing.Optional[bool] = UNDEFINED,
            is_hovered: typing.Optional[bool] = UNDEFINED,
            handle_load: typing.Optional[bool] = UNDEFINED,
            is_loaded: typing.Optional[bool] = UNDEFINED,
            handle_focus: typing.Optional[bool] = UNDEFINED,
            is_focused: typing.Optional[bool] = UNDEFINED,
            class_name: typing.Optional[str] = UNDEFINED,
            identity: str = None
    ):
        """
        :param string:
        :param children:
        :param color:
        :param height:
        :param id:
        :param lang:
        :param max:
        :param media:
        :param method:
        :param min:
        :param name:
        :param style: Style object for the top level wrapper of the
            component.
        :param target:
        :param type:
        :param width:
        :param role:
        :param tabIndex:
        :param crossOrigin: (Possible values: '', 'anonymous', 'use-
            credentials')
        :param accentHeight:
        :param accumulate: (Possible values: 'none', 'sum')
        :param additive: (Possible values: 'sum', 'replace')
        :param alignmentBaseline: (Possible values: 'alphabetic',
            'hanging', 'ideographic', 'mathematical', 'auto', 'baseline',
            'before-edge', 'text-before-edge', 'middle', 'central', 'after-
            edge', 'text-after-edge', 'inherit')
        :param allowReorder: (Possible values: 'no', 'yes')
        :param alphabetic:
        :param amplitude:
        :param arabicForm: (Possible values: 'initial', 'medial',
            'terminal', 'isolated')
        :param ascent:
        :param attributeName:
        :param attributeType:
        :param autoReverse:
        :param azimuth:
        :param baseFrequency:
        :param baselineShift:
        :param baseProfile:
        :param bbox:
        :param begin:
        :param bias:
        :param by:
        :param calcMode:
        :param capHeight:
        :param clip:
        :param clipPath:
        :param clipPathUnits:
        :param clipRule:
        :param colorInterpolation:
        :param colorInterpolationFilters: (Possible values: 'auto',
            'inherit', 'sRGB', 'linearRGB')
        :param colorProfile:
        :param colorRendering:
        :param contentScriptType:
        :param contentStyleType:
        :param cursor:
        :param cx:
        :param cy:
        :param d:
        :param decelerate:
        :param descent:
        :param diffuseConstant:
        :param direction:
        :param display:
        :param divisor:
        :param dominantBaseline:
        :param dur:
        :param dx:
        :param dy:
        :param edgeMode:
        :param elevation:
        :param enableBackground:
        :param end:
        :param exponent:
        :param externalResourcesRequired:
        :param fill:
        :param fillOpacity:
        :param fillRule: (Possible values: 'inherit', 'nonzero', 'evenodd')
        :param filter:
        :param filterRes:
        :param filterUnits:
        :param floodColor:
        :param floodOpacity:
        :param focusable:
        :param fontFamily:
        :param fontSize:
        :param fontSizeAdjust:
        :param fontStretch:
        :param fontStyle:
        :param fontVariant:
        :param fontWeight:
        :param format:
        :param fx:
        :param fy:
        :param g1:
        :param g2:
        :param glyphName:
        :param glyphOrientationHorizontal:
        :param glyphOrientationVertical:
        :param glyphRef:
        :param gradientTransform:
        :param gradientUnits:
        :param hanging:
        :param horizAdvX:
        :param horizOriginX:
        :param href:
        :param ideographic:
        :param imageRendering:
        :param in2:
        :param intercept:
        :param k1:
        :param k2:
        :param k3:
        :param k4:
        :param k:
        :param kernelMatrix:
        :param kernelUnitLength:
        :param kerning:
        :param keyPoints:
        :param keySplines:
        :param keyTimes:
        :param lengthAdjust:
        :param letterSpacing:
        :param lightingColor:
        :param limitingConeAngle:
        :param local:
        :param markerEnd:
        :param markerHeight:
        :param markerMid:
        :param markerStart:
        :param markerUnits:
        :param markerWidth:
        :param mask:
        :param maskContentUnits:
        :param maskUnits:
        :param mathematical:
        :param mode:
        :param numOctaves:
        :param offset:
        :param opacity:
        :param operator:
        :param order:
        :param orient:
        :param orientation:
        :param origin:
        :param overflow:
        :param overlinePosition:
        :param overlineThickness:
        :param paintOrder:
        :param panose1:
        :param path:
        :param pathLength:
        :param patternContentUnits:
        :param patternTransform:
        :param patternUnits:
        :param pointerEvents:
        :param points:
        :param pointsAtX:
        :param pointsAtY:
        :param pointsAtZ:
        :param preserveAlpha:
        :param preserveAspectRatio:
        :param primitiveUnits:
        :param r:
        :param radius:
        :param refX:
        :param refY:
        :param renderingIntent:
        :param repeatCount:
        :param repeatDur:
        :param requiredExtensions:
        :param requiredFeatures:
        :param restart:
        :param result:
        :param rotate:
        :param rx:
        :param ry:
        :param scale:
        :param seed:
        :param shapeRendering:
        :param slope:
        :param spacing:
        :param specularConstant:
        :param specularExponent:
        :param speed:
        :param spreadMethod:
        :param startOffset:
        :param stdDeviation:
        :param stemh:
        :param stemv:
        :param stitchTiles:
        :param stopColor:
        :param stopOpacity:
        :param strikethroughPosition:
        :param strikethroughThickness:
        :param stroke:
        :param strokeDasharray:
        :param strokeDashoffset:
        :param strokeLinecap: (Possible values: 'inherit', 'butt', 'round',
            'square')
        :param strokeLinejoin: (Possible values: 'inherit', 'round',
            'miter', 'bevel')
        :param strokeMiterlimit:
        :param strokeOpacity:
        :param strokeWidth:
        :param surfaceScale:
        :param systemLanguage:
        :param tableValues:
        :param targetX:
        :param targetY:
        :param textAnchor:
        :param textDecoration:
        :param textLength:
        :param textRendering:
        :param to:
        :param transform:
        :param u1:
        :param u2:
        :param underlinePosition:
        :param underlineThickness:
        :param unicode:
        :param unicodeBidi:
        :param unicodeRange:
        :param unitsPerEm:
        :param vAlphabetic:
        :param values:
        :param vectorEffect:
        :param version:
        :param vertAdvY:
        :param vertOriginX:
        :param vertOriginY:
        :param vHanging:
        :param vIdeographic:
        :param viewBox:
        :param viewTarget:
        :param visibility:
        :param vMathematical:
        :param widths:
        :param wordSpacing:
        :param writingMode:
        :param x1:
        :param x2:
        :param x:
        :param xChannelSelector:
        :param xHeight:
        :param xlinkActuate:
        :param xlinkArcrole:
        :param xlinkHref:
        :param xlinkRole:
        :param xlinkShow:
        :param xlinkTitle:
        :param xlinkType:
        :param xmlBase:
        :param xmlLang:
        :param xmlns:
        :param xmlnsXlink:
        :param xmlSpace:
        :param y1:
        :param y2:
        :param y:
        :param yChannelSelector:
        :param z:
        :param zoomAndPan:
        :param handle_clicks:
        :param clicks:
        :param click_event:
        :param handle_hover:
        :param is_hovered:
        :param handle_load:
        :param is_loaded:
        :param handle_focus:
        :param is_focused:
        :param class_name: Class name automatically added by dazzler api
            with a prefix for the  component library. ie: core component
            Container become ``dazzler-core-container``. When added on the
            component, the class names will be concatenated.
        """
        Component.__init__(self, locals(), identity)
