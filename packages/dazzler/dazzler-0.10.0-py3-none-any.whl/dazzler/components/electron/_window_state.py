"""Autogenerated file: DO NOT EDIT!"""
import typing  # noqa: F401
from dazzler.system import Component, Aspect, UNDEFINED  # noqa: F401


class WindowState(Component):
    """
    Get & Set the state of the Electron window.

    .. warning::
         Setting/Getting with ties/binding can lead to circular dependencies.
    """
    height = Aspect()
    width = Aspect()
    fullscreen = Aspect()
    x = Aspect()
    y = Aspect()
    resizable = Aspect()
    minimized = Aspect()
    minimizable = Aspect()
    maximized = Aspect()
    maximizable = Aspect()
    movable = Aspect()
    closable = Aspect()
    focus = Aspect()
    set_width = Aspect()
    set_height = Aspect()
    set_fullscreen = Aspect()
    set_x = Aspect()
    set_y = Aspect()
    set_focus = Aspect()
    set_resizable = Aspect()
    set_minimizable = Aspect()
    set_maximizable = Aspect()
    set_closable = Aspect()
    set_movable = Aspect()
    set_minimized = Aspect()
    set_maximized = Aspect()
    close = Aspect(docstring="Close the window.")
    class_name = Aspect(docstring="Class name automatically added by dazzler api with a prefix for the component library.ie: core component Container become ``dazzler-core-container``.When added on the component, the class names will be concatenated.")  # noqa: E501
    style = Aspect(docstring="Style object for the top level wrapper of the component.")  # noqa: E501

    def __init__(
            self,
            height: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            width: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            fullscreen: typing.Optional[bool] = UNDEFINED,
            x: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            y: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            resizable: typing.Optional[bool] = UNDEFINED,
            minimized: typing.Optional[bool] = UNDEFINED,
            minimizable: typing.Optional[bool] = UNDEFINED,
            maximized: typing.Optional[bool] = UNDEFINED,
            maximizable: typing.Optional[bool] = UNDEFINED,
            movable: typing.Optional[bool] = UNDEFINED,
            closable: typing.Optional[bool] = UNDEFINED,
            focus: typing.Optional[bool] = UNDEFINED,
            set_width: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            set_height: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            set_fullscreen: typing.Optional[bool] = UNDEFINED,
            set_x: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            set_y: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            set_focus: typing.Optional[bool] = UNDEFINED,
            set_resizable: typing.Optional[bool] = UNDEFINED,
            set_minimizable: typing.Optional[bool] = UNDEFINED,
            set_maximizable: typing.Optional[bool] = UNDEFINED,
            set_closable: typing.Optional[bool] = UNDEFINED,
            set_movable: typing.Optional[bool] = UNDEFINED,
            set_minimized: typing.Optional[bool] = UNDEFINED,
            set_maximized: typing.Optional[bool] = UNDEFINED,
            close: typing.Optional[bool] = UNDEFINED,
            class_name: typing.Optional[str] = UNDEFINED,
            style: typing.Optional[typing.Dict] = UNDEFINED,
            identity: str = None
    ):
        """
        :param height:
        :param width:
        :param fullscreen:
        :param x:
        :param y:
        :param resizable:
        :param minimized:
        :param minimizable:
        :param maximized:
        :param maximizable:
        :param movable:
        :param closable:
        :param focus:
        :param set_width:
        :param set_height:
        :param set_fullscreen:
        :param set_x:
        :param set_y:
        :param set_focus:
        :param set_resizable:
        :param set_minimizable:
        :param set_maximizable:
        :param set_closable:
        :param set_movable:
        :param set_minimized:
        :param set_maximized:
        :param close: Close the window.
        :param class_name: Class name automatically added by dazzler api
            with a prefix for the  component library. ie: core component
            Container become ``dazzler-core-container``. When added on the
            component, the class names will be concatenated.
        :param style: Style object for the top level wrapper of the
            component.
        """
        Component.__init__(self, locals(), identity)
