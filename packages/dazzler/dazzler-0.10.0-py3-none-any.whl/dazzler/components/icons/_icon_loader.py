"""Autogenerated file: DO NOT EDIT!"""
import typing  # noqa: F401
from dazzler.system import Component, Aspect, UNDEFINED  # noqa: F401


class IconLoader(Component):
    """
    Manager for loading icon packs

    Insert once in the layout, can load the packs from the props.
    Manage the loaded packs so icons knows when to render.
    ``IconPack``'s in the layout need this component.
    """
    packs = Aspect(default=UNDEFINED, docstring="Packs to automatically load when this component mounts. (default=[])")  # noqa: E501
    children = Aspect(children=True)
    class_name = Aspect(docstring="Class name automatically added by dazzler api with a prefix for the component library.ie: core component Container become ``dazzler-core-container``.When added on the component, the class names will be concatenated.")  # noqa: E501
    style = Aspect(docstring="Style object for the top level wrapper of the component.")  # noqa: E501

    def __init__(
            self,
            packs: typing.Optional[typing.List[typing.Dict[str, typing.Union[str]]]] = UNDEFINED,  # noqa: E501
            children: typing.Optional[typing.Union[str, int, float, Component, typing.List[typing.Union[str, int, float, Component]]]] = UNDEFINED,  # noqa: E501
            class_name: typing.Optional[str] = UNDEFINED,
            style: typing.Optional[typing.Dict] = UNDEFINED,
            identity: str = None
    ):
        """
        :param packs: Packs to automatically load when this component
            mounts. (default=[])
        :param children:
        :param class_name: Class name automatically added by dazzler api
            with a prefix for the  component library. ie: core component
            Container become ``dazzler-core-container``. When added on the
            component, the class names will be concatenated.
        :param style: Style object for the top level wrapper of the
            component.
        """
        Component.__init__(self, locals(), identity)
