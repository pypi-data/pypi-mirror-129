"""Autogenerated file: DO NOT EDIT!"""
import typing  # noqa: F401
from dazzler.system import Component, Aspect, UNDEFINED  # noqa: F401


class Table(Component):
    """
    Display data in a tabular manner (Non interactive).

    :CSS:

        - ``dazzler-core-table``
        - ``table-head``
        - ``table-heading``
        - ``table-body``
        - ``table-row``
        - ``table-cell``
        - ``table-footer``

    :Example:

    .. literalinclude:: ../../tests/components/pages/table.py
        :lines: 5-22
    """
    rows = Aspect(children=True, docstring="Rows of data or components to display.")  # noqa: E501
    caption = Aspect(children=True, docstring="Title of the table")
    headers = Aspect(children=True, docstring="Table headings")
    footer = Aspect(children=True, docstring="Content of tfoot element (.table-footer)")  # noqa: E501
    include_row_number = Aspect(docstring="Each row start with the row number.")  # noqa: E501
    row_number_start = Aspect(docstring="The start of the row number, useful if paged.")  # noqa: E501
    default_table = Aspect(default=True, docstring="Apply default style. (default=True)")  # noqa: E501
    collapsed = Aspect(default=True, docstring="Collapse the borders of the table. (default=True)")  # noqa: E501
    centered = Aspect(docstring="Center the cell")
    bordered = Aspect(docstring="Put a border around elements")
    size = Aspect(docstring="The size of the table. (Possible values: 'tiny', 'small', 'medium', 'large', 'larger', 'x-large', 'xx-large')")  # noqa: E501
    color = Aspect(docstring="Font color")
    background = Aspect(docstring="Background color/image")
    padding = Aspect(docstring="Space around the content before the border")
    padding_top = Aspect()
    padding_bottom = Aspect()
    padding_left = Aspect()
    padding_right = Aspect()
    margin = Aspect(docstring="Space after the element border")
    margin_top = Aspect()
    margin_bottom = Aspect()
    margin_left = Aspect()
    margin_right = Aspect()
    overflow = Aspect(docstring="Overflow the content and show a scrollbar.")
    height = Aspect(docstring="Height of the component.")
    min_height = Aspect()
    max_height = Aspect(docstring="Maximum height before overflow.")
    width = Aspect(docstring="Width of the component.")
    min_width = Aspect()
    max_width = Aspect(docstring="Maximum width before overflowing.")
    font_family = Aspect(docstring="Font to use.")
    font_size = Aspect(docstring="Size of the font.")
    font_weight = Aspect(docstring="Boldness")
    font_style = Aspect(docstring="Italic")
    text_align = Aspect(docstring="Left center right.")
    border = Aspect(docstring="Border around the component.")
    border_radius = Aspect(docstring="Round the corner of the component, needs a background or border.")  # noqa: E501
    cursor = Aspect(docstring="Cursor when the mouse is over the component.")
    flex_grow = Aspect(docstring="Grow factor for flex item.")
    flex_shrink = Aspect(docstring="Shrink factor for flex item.")
    align_self = Aspect(docstring="Flex alignment for the component. (Possible values: 'flex-start', 'flex-end', 'center', 'stretch', 'baseline', 'auto')")  # noqa: E501
    display = Aspect(docstring="CSS, How to display the component.")
    class_name = Aspect(docstring="Class name automatically added by dazzler api with a prefix for the component library.ie: core component Container become ``dazzler-core-container``.When added on the component, the class names will be concatenated.")  # noqa: E501
    style = Aspect(docstring="Style object for the top level wrapper of the component.")  # noqa: E501

    def __init__(
            self,
            rows: typing.Optional[typing.List[typing.List[typing.Union[str, int, float, Component, typing.List[typing.Union[str, int, float, Component]]]]]] = UNDEFINED,  # noqa: E501
            caption: typing.Optional[typing.Union[str, int, float, Component, typing.List[typing.Union[str, int, float, Component]]]] = UNDEFINED,  # noqa: E501
            headers: typing.Optional[typing.List[typing.Union[str, int, float, Component, typing.List[typing.Union[str, int, float, Component]]]]] = UNDEFINED,  # noqa: E501
            footer: typing.Optional[typing.Union[str, int, float, Component, typing.List[typing.Union[str, int, float, Component]]]] = UNDEFINED,  # noqa: E501
            include_row_number: typing.Optional[bool] = UNDEFINED,
            row_number_start: typing.Optional[typing.Union[float, int]] = UNDEFINED,  # noqa: E501
            default_table: typing.Optional[bool] = True,
            collapsed: typing.Optional[bool] = True,
            centered: typing.Optional[bool] = UNDEFINED,
            bordered: typing.Optional[bool] = UNDEFINED,
            size: typing.Optional[typing.Any] = UNDEFINED,
            color: typing.Optional[str] = UNDEFINED,
            background: typing.Optional[str] = UNDEFINED,
            padding: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            padding_top: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            padding_bottom: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            padding_left: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            padding_right: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            margin: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            margin_top: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            margin_bottom: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            margin_left: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            margin_right: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            overflow: typing.Optional[str] = UNDEFINED,
            height: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            min_height: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            max_height: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            width: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            min_width: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            max_width: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            font_family: typing.Optional[str] = UNDEFINED,
            font_size: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            font_weight: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            font_style: typing.Optional[str] = UNDEFINED,
            text_align: typing.Optional[str] = UNDEFINED,
            border: typing.Optional[str] = UNDEFINED,
            border_radius: typing.Optional[typing.Union[str, typing.Union[float, int]]] = UNDEFINED,  # noqa: E501
            cursor: typing.Optional[str] = UNDEFINED,
            flex_grow: typing.Optional[typing.Union[float, int]] = UNDEFINED,
            flex_shrink: typing.Optional[typing.Union[float, int]] = UNDEFINED,  # noqa: E501
            align_self: typing.Optional[typing.Any] = UNDEFINED,
            display: typing.Optional[str] = UNDEFINED,
            class_name: typing.Optional[str] = UNDEFINED,
            style: typing.Optional[typing.Dict] = UNDEFINED,
            identity: str = None
    ):
        """
        :param rows: Rows of data or components to display.
        :param caption: Title of the table
        :param headers: Table headings
        :param footer: Content of tfoot element (.table-footer)
        :param include_row_number: Each row start with the row number.
        :param row_number_start: The start of the row number, useful if
            paged.
        :param default_table: Apply default style. (default=True)
        :param collapsed: Collapse the borders of the table. (default=True)
        :param centered: Center the cell
        :param bordered: Put a border around elements
        :param size: The size of the table. (Possible values: 'tiny',
            'small', 'medium', 'large', 'larger', 'x-large', 'xx-large')
        :param color: Font color
        :param background: Background color/image
        :param padding: Space around the content before the border
        :param padding_top:
        :param padding_bottom:
        :param padding_left:
        :param padding_right:
        :param margin: Space after the element border
        :param margin_top:
        :param margin_bottom:
        :param margin_left:
        :param margin_right:
        :param overflow: Overflow the content and show a scrollbar.
        :param height: Height of the component.
        :param min_height:
        :param max_height: Maximum height before overflow.
        :param width: Width of the component.
        :param min_width:
        :param max_width: Maximum width before overflowing.
        :param font_family: Font to use.
        :param font_size: Size of the font.
        :param font_weight: Boldness
        :param font_style: Italic
        :param text_align: Left center right.
        :param border: Border around the component.
        :param border_radius: Round the corner of the component, needs a
            background or border.
        :param cursor: Cursor when the mouse is over the component.
        :param flex_grow: Grow factor for flex item.
        :param flex_shrink: Shrink factor for flex item.
        :param align_self: Flex alignment for the component. (Possible
            values: 'flex-start', 'flex-end', 'center', 'stretch', 'baseline',
            'auto')
        :param display: CSS, How to display the component.
        :param class_name: Class name automatically added by dazzler api
            with a prefix for the  component library. ie: core component
            Container become ``dazzler-core-container``. When added on the
            component, the class names will be concatenated.
        :param style: Style object for the top level wrapper of the
            component.
        """
        Component.__init__(self, locals(), identity)
