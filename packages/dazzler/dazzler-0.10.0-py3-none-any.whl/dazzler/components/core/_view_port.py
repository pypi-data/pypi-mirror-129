"""Autogenerated file: DO NOT EDIT!"""
import typing  # noqa: F401
from dazzler.system import Component, Aspect, UNDEFINED  # noqa: F401


class ViewPort(Component):
    """
    Activate a view with key.

    Standalone or tabbed.

    :CSS:

        - ``dazzler-core-view-port``
        - ``view-content``
        - ``dazzler-tab``
        - ``dazzler-tabs``
        - ``tab-active``
    """
    active = Aspect(required=True, docstring="The view that is active.")
    views = Aspect(required=True, docstring="A dictionary of components to render with the active key.")  # noqa: E501
    tabbed = Aspect(docstring="Incorporate tabs before the views.")
    tab_labels = Aspect(docstring="Labels for the tabs otherwise the tab keys will be used.")  # noqa: E501
    vertical_tabs = Aspect(docstring="Make the tabs vertical aligned.")
    rounded_tabs = Aspect(docstring="Round tab style")
    bordered = Aspect(docstring="Add a border around the viewport content (CSS bordered).")  # noqa: E501
    class_name = Aspect(docstring="Class name automatically added by dazzler api with a prefix for the component library.ie: core component Container become ``dazzler-core-container``.When added on the component, the class names will be concatenated.")  # noqa: E501
    style = Aspect(docstring="Style object for the top level wrapper of the component.")  # noqa: E501

    def __init__(
            self,
            active: str,
            views: typing.Any,
            tabbed: typing.Optional[bool] = UNDEFINED,
            tab_labels: typing.Optional[typing.Any] = UNDEFINED,
            vertical_tabs: typing.Optional[bool] = UNDEFINED,
            rounded_tabs: typing.Optional[bool] = UNDEFINED,
            bordered: typing.Optional[bool] = UNDEFINED,
            class_name: typing.Optional[str] = UNDEFINED,
            style: typing.Optional[typing.Dict] = UNDEFINED,
            identity: str = None
    ):
        """
        :param active: The view that is active.
        :param views: A dictionary of components to render with the active
            key.
        :param tabbed: Incorporate tabs before the views.
        :param tab_labels: Labels for the tabs otherwise the tab keys will
            be used.
        :param vertical_tabs: Make the tabs vertical aligned.
        :param rounded_tabs: Round tab style
        :param bordered: Add a border around the viewport content (CSS
            bordered).
        :param class_name: Class name automatically added by dazzler api
            with a prefix for the  component library. ie: core component
            Container become ``dazzler-core-container``. When added on the
            component, the class names will be concatenated.
        :param style: Style object for the top level wrapper of the
            component.
        """
        Component.__init__(self, locals(), identity)
