Metadata-Version: 2.1
Name: prestool
Version: 0.0.32
Summary: prestool
Home-page: https://gitee.com/prestest/pres-pip-prestool
Author: Pres
Author-email: preszang@foxmail.com
License: MIT
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7.0
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: faker
Requires-Dist: beautifulsoup4
Requires-Dist: loguru
Requires-Dist: yagmail
Requires-Dist: lxml
Requires-Dist: pymysql


### 一、安装（python版本建议3.7以上）

```bash
pip install --upgrade  prestool
```

### 二、常用工具

```python
from prestool.Tool import Tool

tool = Tool()
```

#### 随机数据

```python
tool.random_name()  # 随机姓名
tool.random_phone()  # 随机手机号
tool.random_ssn()  # 随机身份证

tool.random_string(16)  # 随机位数的字符串
tool.random_number(8)  # 随机位数的数字

tool.random_ua()  # 随机UA
tool.random_ua('chrome')  # 随机UA-Chrome
tool.random_ua('firefox')  # 随机UA-Firefox
tool.random_ua('ie')  # 随机UA-IE
tool.random_ua('opera')  # 随机UA-opera
tool.random_ua('safari')  # 随机UA-safari
```

#### 编码解码

```python
tool.url_encode('编码前的url地址')  # 编码
tool.url_decode('解码前的url地址')  # 解码

tool.base_64_encode('编码前的字符串')  # base64编码
```

#### 加密相关

```python
tool.to_md5('原始字符串')
tool.to_hmac_256('原始字符串', '加密key')
tool.to_sha_256('原始字符串')
```

#### 发送消息

##### 钉钉

```python
tool.ding_talk_token = '钉钉机器人token'
tool.ding_talk_sign_key = '钉钉机器人签名key'

tool.send_ding_talk_msg('消息内容')
```

##### 企业微信

```python
tool.qy_wechat_token = '企业微信机器人token'

tool.send_qy_wechat_msg('消息内容')
```

##### 邮件

```python
tool.mail_from_user_host = '发件地址host'
tool.mail_from_user = '发件人邮箱号'
tool.mail_from_user_pwd = '发件人密码'

tool.send_mail_msg(to_user='收件人邮箱地址（列表）', title='邮件标题', content='邮件内容')
```

#### 时间相关

```python
tool.time_stamp()  # 秒级时间戳10位
tool.time_stamp('ms')  # 毫秒级时间戳13位

tool.get_now_time()  # 获取当前时间 20201206000000
tool.get_now_time('-')  # 获取当前时间 2020-12-06 00:00:00

tool.date_to_time_stamp('2012-01-01 00:00:00')  # 时间字符串转为时间戳
tool.time_stamp_to_date(1732312234)  # 时间戳转为时间字符串
```

#### 格式转换

```python
tool.json_dumps({"test": "python字典"})  # 字典转json
tool.json_loads('{"test": "python字典"}')  # json转字典
tool.xml_to_dict('<xml><data>字符串</data></xml>')  # xml转成python字典
tool.dict_to_xml({"test": "python字典"})  # python字典 转成xml
```

#### http请求

```python
tool.http_client(url='', data={}, method='GET')  # get请求
tool.http_client(url='', data={}, method='POST')  # post请求

tool.get_cookies(url='接口地址', data={}, method='GET')
tool.get_cookies(url='接口地址', data={}, method='POST')

tool.trans_data_to_url(url='接口地址', data={})  # 把参数拼接到url上
```

#### dubbo接口

```python
tool.dubbo_args('参数1', '参数2', '参数3')  # dubbo接口参数
tool.invoke_dubbo('地址', '端口', '服务API名', '接口方法名', 'dubbo接口参数')  # 请求dubbo接口
```

#### 其他

```python
tool.logger('日志信息')
```

```python
tool.get_ip_by_url('url地址')  # 获取ip
```

### 三、数据库语句（MySQL）

```python
from prestool.PresMySql import SqlStr

sql = SqlStr()
```

#### 查询语句

- target不传时，为全部字段，即*

```python
sql.select_sql_str(table='table1', where={'id': 1, 'name': '张三'})
```

```SQL
 select *
 from table1
 where id = 1
   and name = '张三';
```

- target=[i1,i2,i3]时，为相应字段

```Python
sql.select_sql_str(table='table1', target=['a', 'b', 'c'], where={'id': 1, 'name': '张三'})
sql.select_sql_str(table='table1', target=['a', 'b', 'c'], order={'age': 'desc', 'score': 'desc'})
sql.select_sql_str(table='table1', target=['a', 'b', 'c'], order={'age': 'desc', 'score': 'desc'}, limit=20)
sql.select_sql_str(table='table1', target=['a', 'b', 'c'], where={'id': 1, 'name': 'null', 'age': 'not null'})
```

```SQL
select a, b, c
from table1
where id = 1
  and name = '张三';
select a, b, c
from table1
order by age desc, score desc;

select a, b, c
from table1
where id = 1
  and name is null
  and age is not null;

```

#### 更新语句

- target为要更新的数据，为字典结构

```Python
sql.update_sql_str(table='table1', target={'name': '李四', 'age': 15}, where={'id': 1, 'name': '张三'}) 
```

```SQL
update table1
set name='李四',
    age=15
where id = 1
  and name = '张三';
```

#### 删除数据

```Python
sql.delete_sql_str(table='table1', where={'id': 1, 'name': '张三'})
```

```SQL
delete
from table1
where id = 1
  and name = '张三';
```

#### 插入数据

```Python
sql.insert_sql_str(table='table1', target={'id': 1, 'name': '张三'})
```

```SQL
insert into table1 (id, name)
values (1, '张三');
```

```bash
# 上传到pypi相关
python setup.py bdist_wheel --universal
twine upload dist/*
```

