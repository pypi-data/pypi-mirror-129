#run with python -m unittest test.test_baccoemu
import unittest
import baccoemu
import numpy as np
import copy

emu = baccoemu.Matter_powerspectrum()
lbias_emu = baccoemu.Lbias_expansion()

kk = np.logspace(-2, 0.6, 10)
k_lbias = np.logspace(-2, np.log10(0.7), 10)

params = {
    'omega_matter'  :  0.315,
    'A_s'           :  2e-9,
    'omega_baryon'  :  0.05,
    'ns'            :  0.96,
    'hubble'        :  0.67,
    'neutrino_mass' :  0.1,
    'w0'            : -1.1,
    'wa'            :  0.2,
    'expfactor'     :  0.8,

    'M_c'           :  14,
    'eta'           : -0.3,
    'beta'          : -0.22,
    'M1_z0_cen'     : 10.5,
    'theta_out'     : 0.25,
    'theta_inn'     : -0.86,
    'M_inn'         : 13.4
}

params_sigma8 = copy.deepcopy(params)
del params_sigma8['A_s']
params_sigma8['sigma8_cold'] = 0.78

dec_prec = 5

class test_baccoemu(unittest.TestCase):
    def test_get_nonlinear_boost(self):
        k, Q = emu.get_nonlinear_boost(k=kk, **params)
        Q_tab = np.array([ 1.00036337,  0.99597225,  0.99181247,  0.98081029,  1.03563135,  1.33105986,
  2.27617951,  5.05312409, 11.29811615, 20.2895543 ])
        for i,j in zip(Q,Q_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_baryonic_boost(self):
        k, S = emu.get_baryonic_boost(k=kk, **params)
        S_tab = np.array([1.00061651, 0.99987419, 0.99823298, 0.99842931, 0.99661765,
       0.99049649, 0.97010919, 0.93417986, 0.88753197, 0.83361164])
        for i,j in zip(S,S_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_linear_pk(self):
        k, pk_lin_cold = emu.get_linear_pk(k=kk, cold=True,**params)
        pk_lin_cold_tab = np.array([1.62854183e+04, 1.77584261e+04, 1.16049004e+04, 6.59140251e+03,
       2.49394757e+03, 7.38743986e+02, 1.88090425e+02, 4.23532059e+01,
       8.68574722e+00, 1.66160033e+00])
        for i,j in zip(pk_lin_cold,pk_lin_cold_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

        k, pk_lin_tot = emu.get_linear_pk(k=kk, cold=False, **params)
        pk_lin_tot_tab = np.array([1.61550147e+04, 1.75643833e+04, 1.14536942e+04, 6.48820975e+03,
       2.45236517e+03, 7.26781358e+02, 1.85054606e+02, 4.16805881e+01,
       8.54843339e+00, 1.63535958e+00])
        for i,j in zip(pk_lin_tot,pk_lin_tot_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_smeared_bao_pk(self):
        k, pk = emu.get_smeared_bao_pk(k=kk, **params)
        pk_tab = np.array([1.62870070e+04, 1.77438867e+04, 1.16350610e+04, 6.52558247e+03,
       2.45416259e+03, 7.34044484e+02, 1.87901947e+02, 4.23275559e+01,
       8.67997917e+00, 1.66034432e+00])
        for i,j in zip(pk,pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_nonlinear_pk(self):
        k, pk = emu.get_nonlinear_pk(k=kk, baryonic_boost=True, **params)
        pk_tab = np.array([ 16301.37959522, 17684.67434391, 11489.54668974,  6454.76099775,
  2574.07430376,   973.96754686,   415.33049322,   199.92944142,  87.0958026,     28.10365774])
        for i,j in zip(pk,pk_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_sigma8(self):
        sigma8 = emu.get_sigma8(**params)
        self.assertAlmostEqual(np.round(sigma8 / 0.7861695, dec_prec), 1)

    def test_get_linear_pk_sigma8(self):
        k, pk_lin_cold = emu.get_linear_pk(k=kk, cold=True, **params_sigma8)
        pk_lin_cold_tab = np.array([1.60308165e+04, 1.74807973e+04, 1.14234682e+04, 6.48835535e+03,
       2.45495828e+03, 7.27194518e+02, 1.85149883e+02, 4.16910719e+01,
       8.54995758e+00, 1.63562365e+00])
        for i,j in zip(pk_lin_cold,pk_lin_cold_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

        k, pk_lin_tot = emu.get_linear_pk(k=kk, cold=False, **params_sigma8)
        pk_lin_tot_tab = np.array([1.59024529e+04, 1.72897924e+04, 1.12746319e+04, 6.38677906e+03,
       2.41402569e+03, 7.15418969e+02, 1.82161514e+02, 4.10289736e+01,
       8.41479078e+00, 1.60979307e+00])
        for i,j in zip(pk_lin_tot,pk_lin_tot_tab):
            self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_lpt_pk(self):
        k, pk = lbias_emu.get_lpt_pk(k=k_lbias, **params)

        pk_tab = np.array([[ 1.63201512e+04,  1.80700886e+04,  1.60207326e+04,
         1.07467974e+04,  7.47587340e+03,  3.96375939e+03,
         2.29988955e+03,  1.48109099e+03,  1.04523754e+03,
         7.34888359e+02],
       [ 1.63140518e+04,  1.80884230e+04,  1.60096448e+04,
         1.07505314e+04,  7.50907531e+03,  4.03759539e+03,
         2.41588774e+03,  1.62871283e+03,  1.20113717e+03,
         8.97122401e+02],
       [ 6.66022937e-01,  9.18072480e+00,  4.33364445e+01,
         1.25718942e+02,  2.71306713e+02,  4.68549322e+02,
         5.99359989e+02,  6.03980486e+02,  4.97732828e+02,
         4.04231992e+02],
       [-2.85149397e+00, -6.83039965e+00, -1.90507601e+01,
        -4.06785246e+01, -6.95083648e+01, -9.23657417e+01,
        -9.33944369e+01, -7.36421621e+01, -4.37475730e+01,
         4.05323047e+00],
       [-1.79233276e+00, -4.74973181e+00, -1.06555746e+01,
        -1.81644071e+01, -3.17174315e+01, -4.02563501e+01,
        -4.97670365e+01, -5.71507229e+01, -5.64809183e+01,
        -5.30641713e+01],
       [ 1.62881157e+04,  1.80468517e+04,  1.59875900e+04,
         1.07186541e+04,  7.45075641e+03,  3.88068858e+03,
         2.14513791e+03,  1.25226727e+03,  7.69558167e+02,
         4.90287309e+02],
       [ 2.21230005e+01,  5.79420589e+01,  1.42881640e+02,
         3.01505486e+02,  5.38599174e+02,  8.00624064e+02,
         9.39418284e+02,  8.91155324e+02,  6.97143354e+02,
         4.92911927e+02],
       [ 8.58382121e+00,  1.22207079e+01,  7.79172787e+00,
        -1.07894128e+01, -4.74255709e+01, -8.78301196e+01,
        -1.05135160e+02, -9.35737941e+01, -6.59329427e+01,
        -1.33468780e+01],
       [-1.83253218e+00, -4.71819624e+00, -1.06078080e+01,
        -1.81538982e+01, -3.18027096e+01, -4.02839910e+01,
        -4.98981859e+01, -5.72375057e+01, -5.65626056e+01,
        -5.30468141e+01],
       [ 3.98472248e+03,  3.96138822e+03,  3.91587390e+03,
         3.80468892e+03,  3.57802710e+03,  3.15211205e+03,
         2.51976806e+03,  1.76813010e+03,  1.03278501e+03,
         3.85680367e+02],
       [ 2.58265576e+03,  2.46999335e+03,  2.25827010e+03,
         1.91882589e+03,  1.44503224e+03,  9.40150429e+02,
         4.95248626e+02,  1.81862043e+02,  9.81961236e-01,
        -4.80481122e+01],
       [-5.43913689e-02,  1.29544722e-01,  4.20623401e-01,
         8.31845607e-01,  1.58148794e+00,  2.17098408e+00,
         1.10135305e+00, -4.90625160e+00, -2.41688614e+01,
        -1.08836884e+02],
       [ 1.67827131e+03,  1.57777117e+03,  1.41003094e+03,
         1.17098131e+03,  8.84935112e+02,  6.06486908e+02,
         3.68862223e+02,  1.91404147e+02,  7.87699461e+01,
         3.05807443e+01],
       [ 4.40621240e-02,  1.14457432e-01,  2.95951794e-01,
         7.61127268e-01,  1.89443514e+00,  4.42268222e+00,
         9.11451834e+00,  1.59752059e+01,  2.12756245e+01,
         4.62710764e+00],
       [ 1.78285338e-04,  1.29504012e-03,  7.64751367e-03,
         3.52111702e-02,  1.68945256e-01,  6.53072914e-01,
         2.76475145e+00,  1.26673361e+01,  6.11326207e+01,
         2.43191215e+02]])


        for n in range(15):
            for i,j in zip(pk[n],pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

    def test_get_lpt_pk_sigma8(self):
        k, pk = lbias_emu.get_lpt_pk(k=k_lbias, **params_sigma8)
        pk_tab = np.array([[ 1.60628983e+04,  1.77839173e+04,  1.57662371e+04,
         1.05748655e+04,  7.35449273e+03,  3.89526048e+03,
         2.25479321e+03,  1.44687841e+03,  1.01711716e+03,
         7.13447236e+02],
       [ 1.60545909e+04,  1.77991353e+04,  1.57534480e+04,
         1.05790198e+04,  7.38603664e+03,  3.96690437e+03,
         2.36752911e+03,  1.59013707e+03,  1.16819917e+03,
         8.70750552e+02],
       [ 6.45382381e-01,  8.89555489e+00,  4.19946575e+01,
         1.21841580e+02,  2.62968436e+02,  4.54151695e+02,
         5.80944330e+02,  5.85447708e+02,  4.82496862e+02,
         3.91812337e+02],
       [-2.73642108e+00, -6.58574883e+00, -1.83896375e+01,
        -3.92846764e+01, -6.72531115e+01, -8.94146079e+01,
        -9.03737575e+01, -7.11859133e+01, -4.22416869e+01,
         3.90436690e+00],
       [-1.76304292e+00, -4.67503956e+00, -1.04864641e+01,
        -1.78763132e+01, -3.12127544e+01, -3.96107550e+01,
        -4.89547615e+01, -5.61839129e+01, -5.55426511e+01,
        -5.21986864e+01],
       [ 1.60254790e+04,  1.77619170e+04,  1.57372962e+04,
         1.05483164e+04,  7.32943788e+03,  3.81421269e+03,
         2.10452374e+03,  1.22494366e+03,  7.50001891e+02,
         4.76617002e+02],
       [ 2.14512714e+01,  5.61518248e+01,  1.38483244e+02,
         2.92135297e+02,  5.21994217e+02,  7.75828264e+02,
         9.10332434e+02,  8.63615563e+02,  6.75487420e+02,
         4.77647725e+02],
       [ 8.30708999e+00,  1.18425797e+01,  7.57384222e+00,
        -1.04352646e+01, -4.59141643e+01, -8.50928648e+01,
        -1.01914290e+02, -9.07343924e+01, -6.39219639e+01,
        -1.29461156e+01],
       [-1.80198781e+00, -4.64172136e+00, -1.04407652e+01,
        -1.78657202e+01, -3.12924229e+01, -3.96452430e+01,
        -4.91165755e+01, -5.63193336e+01, -5.56511615e+01,
        -5.21767387e+01],
       [ 3.86255509e+03,  3.83909790e+03,  3.79486943e+03,
         3.68724623e+03,  3.46785170e+03,  3.05457425e+03,
         2.44200669e+03,  1.71354783e+03,  1.00094197e+03,
         3.73755185e+02],
       [ 2.50348425e+03,  2.39449155e+03,  2.18940474e+03,
         1.86041874e+03,  1.40107041e+03,  9.11594020e+02,
         4.80166917e+02,  1.76187736e+02,  7.82997938e-01,
        -4.65350055e+01],
       [-5.36363343e-02,  1.23542401e-01,  4.10033016e-01,
         8.06859257e-01,  1.53212378e+00,  2.09964720e+00,
         1.05480705e+00, -4.77093739e+00, -2.34357013e+01,
        -1.05759334e+02],
       [ 1.62649384e+03,  1.52865643e+03,  1.36620933e+03,
         1.13470497e+03,  8.57490038e+02,  5.87766024e+02,
         3.57482855e+02,  1.85499737e+02,  7.63418542e+01,
         2.96435375e+01],
       [ 4.25998023e-02,  1.10773018e-01,  2.86461013e-01,
         7.36929642e-01,  1.83449795e+00,  4.28353982e+00,
         8.83000961e+00,  1.54769176e+01,  2.06127151e+01,
         4.49490786e+00],
       [ 1.75198914e-04,  1.27283190e-03,  7.51569180e-03,
         3.45820125e-02,  1.65792223e-01,  6.39604815e-01,
         2.70058517e+00,  1.23372473e+01,  5.93882689e+01,
         2.35973713e+02]])

        for n in range(15):
            for i,j in zip(pk[n],pk_tab[n]):
                self.assertAlmostEqual(np.round(i / j, dec_prec), 1)

if __name__ == '__main__':
    unittest.main()
